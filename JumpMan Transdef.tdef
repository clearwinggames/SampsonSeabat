SteadyJumpMan{#X;#Y;#W;#H;#Thrust;!Omnipresent}[rn]
[<Entity Name='JumpMan' X={{X}} Y={{Y}} W={{W}} H={{H}} Omnipresent={{( this.Omnipresent ? "true" : "false" )}} MyColor='F00'>]
[<MyImage CycleLength='84'>]
[<ImageFrames>]
[<ImageFrame DelimitedGrid='0,0,0,0;1,1,1,1;0,0,0,0;' HexCSVKey='FF0000,00FF00'>]
[</ImageFrame>]
[<ImageFrame DelimitedGrid='0,0,0,0;1,1,1,1;0,0,0,0;' HexCSVKey='00FF00,FF0000'>]
[</ImageFrame>]
[</ImageFrames>]
[</MyImage>]
[<MyLogic>]
[<OnUpdate>]
[<ProceduralStatement Name='gravityScript' MyScript='[%= gravity %]' LocalData='^^{**isInAir**:false}^^'>]
[</ProceduralStatement>]
[</OnUpdate>]
[<MyInputs>]
[<InputHandler KeyPredicate='left' MyScript='[%= moveLeft4 %]'>]
[</InputHandler>]
[<InputHandler KeyPredicate='right' MyScript='[%= moveRight4 %]'>]
[</InputHandler>]
[<InputHandler Name='jumpKey' KeyPredicate='space' MyScript='if(!this.LocalData.isInAir(this).isInAir [2a] this.me().MY === 0) { this.me().MY = <{-Thrust}>; this.LocalData.isInAir(this).isInAir=true; }' LocalData='^^{**isInAir**:function(ih) { return find(ih.me().MyLogic.OnUpdate, **gravityScript**).LocalData; } }^^'>]
[</InputHandler>]
[</MyInputs>]
[</MyLogic>]
[</Entity>]