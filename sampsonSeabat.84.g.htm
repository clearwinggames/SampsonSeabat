<html><head><script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.js'></script><script src='https://cdnjs.cloudflare.com/ajax/libs/three.js/r79/three.min.js'></script><script type='text/javascript' src='https://www.midijs.net/lib/midi.js'></script><title>sampsonSeabat84</title></head><body><div id='canvasDiv' onclick='this.requestFullscreen();'  style='position: absolute; text-align: center; width: 800; height: 600'><canvas id='threeCanvas' style='position: absolute; display: block; margin: auto; width: 100%; height: 100%; top: 0; left: 0; z-index:40;' onclick=''></canvas><canvas id='gameCanvas' style='position: absolute; top: 0; left: 0; z-index:60; width: 100%; height: 100%; display: block; margin: auto' onclick=''></canvas></div><script type="text/javascript">
function cursorOverlap(x1, y1, h, w, x2, y2) { let r = x1 + w; let b = y1 + h; if (x2 >= x1 && x2 <= r) {if (y2 >= y1 && y2 <= b) { return true; } } return false; }var mouseCursor = {X:-150,Y:-350};
var prevX = 0;
var prevY = 0;
document.onmousemove = function(e) { if (keyval('h')==true) { prevX = 0; prevY = 0; } else { mouseCursor.X -= (prevX - e.pageX); mouseCursor.Y -= (prevY - e.pageY); prevX = e.pageX; prevY = e.pageY; drawString(mouseCursor.X, mouseCursor.Y, '+', '#FFF', 12); } };
function gameClick() { if (keyval('leftclick')==true) { for(var i in game.active().MyDashboard.MyBars) { let label = game.active().MyDashboard.MyBars[i]; if (cursorOverlap(label.X, label.Y, label.H, label.calculateWidth(), mouseCursor.X, mouseCursor.Y) == true) { label.submit(); } } } refreshClicks(); }
function refreshClicks() { keydown[1] = false; keydown[2] = false; keydown[3] = false; }

/* begin RDS HTMLCoreLoop for canvas */

/* basic supporting infrastructure */

/* Game loop itself */

THREE.Cache.enabled = true;
var FPS = 30;
var activeMidi = {};
function find(array, name) { return array.find(function(arr) { return arr.Name === name; }); }
function checkOverlap(one, two) { return (one.X + one.W > two.X && one.X < two.X + two.W) && (one.Y + one.H > two.Y && one.Y < two.Y + two.H); }
function resize2D(x,y) { if (y !== null && y > 0) { h2d=y; } if (x !== null && x > 0) { w2d=x; } }
function getXDrawBounds2D() { return 1600 * w2d; }
function getYDrawBounds2D() { return 1000 * h2d; }
function viewportCenterX() { return getXDrawBounds2D() / 2; }
function viewportCenterY() { return getYDrawBounds2D() / 2; }
var blockInput = false;
function BlockInput() { blockInput = true; }function wouldCollide(one, two) { return (one.X + one.W > two.X && one.X < two.X + two.W && one.Y + one.H > two.Y && one.Y < two.Y + two.H); }function downkey() { return keyval('down'); }
function upkey() { return keyval('up'); }
function leftkey() { return keyval('left'); }
function rightkey() { return keyval('right'); }
var keydown = { }; 
window.onkeyup = function(e) { keydown[e.keyCode] = false; }
window.onkeydown = function(e) { keydown[e.keyCode] = true; }
window.onclick = function(e) { keydown[e.which] = true; }
function keyval(input) {
 if (blockInput === true) { return false; }
if (keydown[lookup(input)] === true) {
return true;
}
}
function lookup(input) {
if (input === 'leftclick') { return 1; }
if (input === 'middleclick') { return 2; }
if (input === 'rightclick') { return 3; }
if (input === 'tab') { return 9; }
if (input === 'enter') { return 13; }
if (input === 'escape') { return 27; }
if (input === 'space') { return 32; }
if (input === 'left') { return 37; }
if (input === 'up') { return 38; }
if (input === 'right') { return 39; }
if (input === 'down') { return 40; }
if (input === '0') { return 48; }
if (input === '1') { return 49; }
if (input === '2') { return 50; }
if (input === '3') { return 51; }
if (input === '4') { return 52; }
if (input === '5') { return 53; }
if (input === '6') { return 54; }
if (input === '7') { return 55; }
if (input === '8') { return 56; }
if (input === '9') { return 57; }
if (input === 'a') { return 65; }
if (input === 'b') { return 66; }
if (input === 'c') { return 67; }
if (input === 'd') { return 68; }
if (input === 'e') { return 69; }
if (input === 'f') { return 70; }
if (input === 'g') { return 71; }
if (input === 'h') { return 72; }
if (input === 'i') { return 73; }
if (input === 'j') { return 74; }
if (input === 'k') { return 75; }
if (input === 'l') { return 76; }
if (input === 'm') { return 77; }
if (input === 'n') { return 78; }
if (input === 'o') { return 79; }
if (input === 'p') { return 80; }
if (input === 'q') { return 81; }
if (input === 'r') { return 82; }
if (input === 's') { return 83; }
if (input === 't') { return 84; }
if (input === 'u') { return 85; }
if (input === 'v') { return 86; }
if (input === 'w') { return 87; }
if (input === 'x') { return 88; }
if (input === 'y') { return 89; }
if (input === 'z') { return 90; }
}
var w2d = 0.8;
var h2d = 0.8;
var w3d = 1;
var h3d = 0.8;
var w2dd = 1;
var h2dd = 1;
var clearRect = true;
function askStartGame() { if(confirm('Are you sure you want to start the game?')) { startGame(); } }
function startGame() {
runMainSetup();
setInterval(function () 
{
resize2D(game.active().XResolution2D, game.active().YResolution2D);
gameClick();
draw();
update();
blockInput = false;
}, 1000 / FPS);
}
function draw() {
reallignCanvases();
document.getElementById('threeCanvas').width = window.innerWidth * w3d;
document.getElementById('gameCanvas').width = window.innerWidth * w2d;
document.getElementById('threeCanvas').height = window.innerHeight * h3d;
document.getElementById('gameCanvas').height = window.innerHeight * h2d;
if (clearRect === true) { var can = getCanvas(); can.clearRect(0,0,window.innerWidth*w2dd,window.innerHeight*h2dd); /*drawRectangle(0,0,window.innerWidth*w2dd,window.innerHeight*h2dd,'#007');*/ }
game.draw();
}
function update() {
if (keyval('0')) { document.getElementById('canvasDiv').requestFullscreen(); }
if (typeof serverSync === 'function') { serverSync(game); }game.update();
}
var cwg = null;/*game.Classes;*/
/* end RDS HTMLCoreLoop for canvas */
var game = {"hasChangeStack":
 function() { return (typeof localChangeStack != 'undefined' && localChangeStack instanceof Array); }
,"loadDash":
 function(nameOf) { for(var i in this.DataLibrary.DataViews) {if (this.DataLibrary.DataViews[i].Name==nameOf) {game.active().loadedDash = this.DataLibrary.DataViews[i].asDashboard();}}}
,"isObjectEmpty":
 function(obj) { return (Object.keys(obj).length === 0 && obj.constructor === Object); }
,"save":
 function() {game.EventBoard.saveGame();}
,"scene":
 function() {return this.active().active();}
,"renderMessage":
 function(msg) {drawRectangle(128, 384, 544, 192, '#777'); drawString(160, 416, msg, '#FFF');}
,"message":
 function(msg) {this.messages.push({MSG:msg, update: function() { game.renderMessage(this.MSG); } } );}
,"fadingMessage":
 function(msg,dur) {this.fadingMessages.push({MSG:msg,Duration:dur,ct:0,render:function() { drawRectangle(128, 384, 544, 192, '#777'); drawString(160, 416, this.MSG, '#FFF'); },update:function() { if (this.ct < this.Duration) { this.ct++; this.render(); } else { game.fadingMessages.splice(0, 1); game.unpause(); } }})}
,"interruptMessage":
 function(msg,dur) {this.fadingMessage(msg, dur); this.pause();}
,"getConfirmation":
 function(msg,runWith) {this.confirmations.push({MSG:msg,entry:0,OnEntry:runWith}); this.pause();}
,"dispelMessage":
 function(msg) {this.message(msg); this.pause();}
,"active":
 function() { return this.SceneContexts[this.Target]; }
,"setup":
function() { this.AOPEngine.setup(); for(var i in this.SceneContexts) { this.SceneContexts[i].setup(); }  }
,"findEntity":
function(entName) { return find(this.scene().allEntities(), entName); }
,"findThrentity":
function(threntName) { return find(this.scene().Threntities, threntName); }
,"update":
function() {if (this.shouldUpdate) {this.SceneContexts[this.Target].update(); }this.updateFadingMessages();this.updateConfirmations();this.updateMessages();}
,"updateConfirmations":
 function() {if (this.confirmations.length > 0) { game.renderMessage(this.confirmations[0].MSG);  if (this.confirmations[0].entry == 0) { drawRectangle(248,456,40,32,'#BBB'); } else { drawRectangle(536,456,40,32,'#BBB'); } if (game.active().isNewPress('left')) { this.confirmations[0].entry = 0; } else if (game.active().isNewPress('right')) { this.confirmations[0].entry = 1; } if (game.active().isNewPress('s')) { this.unpause(); this.confirmations[0].OnEntry(this.confirmations[0].entry); this.confirmations.splice(0, 1); } drawString(256, 480, 'Yes','#FFF'); drawString(544,480,'No','#FFF'); }}
,"updateMessages":
 function() {if (this.messages.length > 0) { this.messages[0].update(); } if (keydown.enter || keydown.space) { this.messages.splice(0,1); this.unpause(); }}
,"updateFadingMessages":
 function() {if (this.fadingMessages.length > 0) { this.fadingMessages[0].update(); }}
,"confirmations":
[]
,"fadingMessages":
[]
,"messages":
[]
,"draw":
function() {/*drawString(64, 64, this.Name, '#FFF');*/this.SceneContexts[this.Target].draw();}
,"pause":
 function() {this.shouldUpdate = false;}
,"unpause":
 function() {this.shouldUpdate = true;}
,"shouldUpdate":
true
,"Description":"","GameData":"","Target":0,"ServerId":null,"SceneContexts":[{"active":
function() {return this.Scenes[this.Target];}
,"setScene":
 function(index) {for( var i = scene.children.length - 1; i >= 0; i--) { var toClear = scene.children[i]; scene.remove(toClear); } this.Target = index; if (!this.active().isSetup || this.active().isSetup) { this.active().setup(); } this.active().reloadThrentities(); /*this.active().loadScene();*/}
,"setup":
 function() { this.MyDashboard.initialize();this.active().setup();}
,"update":
function() { this.Scenes[this.Target].update();this.MyLogic.update();for(var i in this.SceneGrids) { this.SceneGrids[i].update(this.SceneGrids[i].TargetEntity); }for(var i in this.SceneCubes) { this.SceneCubes[i].update(this.SceneCubes[i].TargetEntity); }for(var i in this.KeyHandlers) { this.KeyHandlers[i].update(); } }
,"isNewPress":
 function(key) {for(var i in this.KeyHandlers) { if (this.KeyHandlers[i].KeyName == key) { return this.KeyHandlers[i].isNewPress(); } } return false;}
,"draw":
function() { this.Scenes[this.Target].draw();this.activeDash().draw();}
,"resetDash":
function() { this.loadedDash = {}; }
,"loadedDash":
{}
,"hasLoadedDash":
function() { return game.isObjectEmpty(this.loadedDash) != true; }
,"activeDash":
 function() { if (this.hasLoadedDash() == true) {return this.loadedDash;}else { return this.MyDashboard; }}
,"Target":0,"Scenes":[{"reloadThrentities":
function() { var allT = this.allThrentities(); for(var i in allT) { setupThrentity(allT[i]); } }
,"setup":
 function() {if (this.isSetup !== true) {for(var i in this.TileGrids) { this.TileGrids[i].setup(this); } for(var i in this.PointLights) { this.PointLights[i].setup(this); } if (this.MyAudio !== null) { for (var i = 0; i < this.MyAudio.length; i++) { this.MyAudio[i].setup(); } }if (game.active().Omnipresent2D.length > 0) { var indices = this.entityIndexArray(); var allE = this.allEntities();  for(var i in allE) { if (allE[i].MyIndex != '') { var ind = indices.indexOf(allE[i].MyIndex); if(ind != -1) { indices.splice(ind, 1); } } else { allE[i].setup(indices[i]); } }  } else { for(var i in this.Entities) { this.Entities[i].setup(i); } }if (game.active().Omnipresent3D.length > 0) { var indices = this.threntityIndexArray(); var allT = this.allThrentities(); for(var i in allT) { if (allT[i].MyIndex != '') { var ind = indices.indexOf(allT[i].MyIndex); if (ind != -1) { indices.splice(ind, 1); } } else { allT[i].setup(indices[i]); } }  } else { for(var i in this.Threntities) { this.Threntities[i].setup(i); } }if (this.HasAmbientLight == true) { addAmbientLightToCurrentScene(this.AmbientLightColor, this.AmbientLightIntensity / parseFloat(100)); }this.isSetup = true; }}
,"update":
 function() {this.MyLogic.update();for(var i in this.MyAudio) { this.MyAudio[i].update(); } var allE = this.allEntities(); for(var i in allE) { allE[i].update(); }var allT = this.allThrentities(); for(var i in allT) { allT[i].update(); }for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].update(this.AdhocSceneRefs[i].TargetName); } for(var i in this.TileGrids) { this.TileGrids[i].update(); } }
,"draw":
 function() {for(var i in this.TileGrids) { this.TileGrids[i].draw(); } var allE = this.allEntities(); for(var i in allE) { if (allE[i].Disabled !== true) { allE[i].draw(); } }var allT = this.allThrentities(); for(var i in allT) { allT[i].draw(); } }
,"entityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent2D) { ray.push(game.active().Omnipresent2D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Entities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"threntityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent3D) { ray.push(game.active().Omnipresent3D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Threntities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"checkMovePoint3d":
function(point3dBefore, point3dAfter) {  var all = this.allThrentities(); for(var i in all) { if (this.checkPointCollision(all[i], point3dBefore, point3dAfter)==true) { return false; } } return true;  }
,"checkPointCollision":
function(targetThrent, point3dBefore, point3dAfter) { var xBef = point3dBefore.X;var xAft = point3dAfter.X;var yBef = point3dBefore.Y;var yAft = point3dAfter.Y;var zBef = point3dBefore.Z;var zAft = point3dAfter.Z;var minX = targetThrent.L();var maxX = targetThrent.R();var minY = targetThrent.B();var maxY = targetThrent.T();var minZ = targetThrent.A();var maxZ = targetThrent.F();var xOverlap = false; var yOverlap = false; var zOverlap = false;if (xBef<xAft) { xOverlap = this.checkRangeOverlap(xBef, xAft, minX, maxX); } else { xOverlap = this.checkRangeOverlap(xAft, xBef, minX, maxX); }if (yBef<yAft) { yOverlap = this.checkRangeOverlap(yBef, yAft, minY, maxY); } else { yOverlap = this.checkRangeOverlap(yAft, yBef, minY, maxY); }if (zBef<zAft) { zOverlap = this.checkRangeOverlap(zBef, zAft, minZ, maxZ); } else { zOverlap = this.checkRangeOverlap(zAft, zBef, minZ, maxZ); }if (xOverlap==true && yOverlap==true && zOverlap==true) { return true; } return false;}
,"checkRangeOverlap":
function (inputOneMin, inputOneMax, inputTwoMin, inputTwoMax) {if (inputOneMin > inputTwoMax || inputOneMax < inputTwoMin) { return false; }return true;}
,"threnCollideContextual":
function(thren, before, after) { var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name) { if (this.ZStraddle(before, after, all[i])===true && this.XStraddle(before, after, all[i])===true && this.YStraddle(before, after, all[i])===true) { hasCollide = true; } if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } } }return hasCollide;}
,"ZStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Z - before.Z;let secondDiff = target.Z - after.Z;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"XStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.X - before.X;let secondDiff = target.X - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"YStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Y - before.Y;let secondDiff = target.Y - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"getFirstThrenCollide":
function(thren) { var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { return thren; } } }
,"threnCollide":
 function(thren) {var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } }return hasCollide;}
,"moveAll2D":
function(x, y) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for (var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"moveAll2DAround":
function(x, y, entName) { var ent = find(game.scene().Entities, entName); if (this.wouldCollide(ent.transpose(-x, -y)) === false) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } } }
,"quickMoveAll2DAround":
function(x, y, ent) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"tryMoveAll2DAround":
function(x, y, entName) {if (this.getMainTilegrid() === -1) { return this.moveAll2DAround(x, y, entName); } else { this.dynamic2DMove(x, y, entName, this.getMainTilegrid()); } }
,"dynamic2DMove":
function(x, y, entName, tileGrid) {var ent = game.findEntity(entName);if (this.wouldCollide(ent.transpose(-x, -y)) === false) {this.dynamic2DMoveX(x, ent, tileGrid);this.dynamic2DMoveY(y, ent, tileGrid); }}
,"dynamic2DMoveUp":
function(y, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterY() === false && ent.isCenteredY() === false) ? 0 : (ent.myCenterY() - viewportCenterY());if (amtMoveHeroTowardsCenter >= y) { ent.Y -= y; return; } else { ent.Y -= amtMoveHeroTowardsCenter; }var remainder = y - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.Y;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(0, remainder, ent); return; } else { this.quickMoveAll2DAround(0, Math.abs(tileGridSlack), ent); }remainder = remainder - Math.abs(tileGridSlack);ent.Y -= remainder;}
,"dynamic2DMoveDown":
function(y, ent, tileGrid) {var absY = Math.abs(y);var amtMoveHeroTowardsCenter = (ent.isCenteredY() || ent.pastCenterY()) ? 0 : viewportCenterY() - ent.myCenterY();if (amtMoveHeroTowardsCenter >= absY) { ent.Y -= y; return; } else { ent.Y += amtMoveHeroTowardsCenter; }var remainder = absY - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.B() - getYDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(0, -remainder, ent); return; } else { this.quickMoveAll2DAround(0, tileGridSlack, ent); }remainder = remainder - tileGridSlack;ent.Y += remainder;}
,"dynamic2DMoveLeft":
function(x, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterX() === false && ent.isCenteredX() === false) ? 0 : (ent.myCenterX() - viewportCenterX());if (amtMoveHeroTowardsCenter >= x) { ent.X -= x; return; } else { ent.X -= amtMoveHeroTowardsCenter; }var remainder = x - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.X;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(remainder, 0, ent); return; } else { this.quickMoveAll2DAround(Math.abs(tileGridSlack), 0, ent); }remainder = remainder - Math.abs(tileGridSlack);ent.X -= remainder;}
,"dynamic2DMoveRight":
function(x, ent, tileGrid) {var absX = Math.abs(x);var amtMoveHeroTowardsCenter = (ent.isCenteredX() || ent.pastCenterX()) ? 0 : viewportCenterX() - ent.myCenterX();if (amtMoveHeroTowardsCenter >= absX) { ent.X -= x; return; } else { ent.X += amtMoveHeroTowardsCenter; }var remainder = absX - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.R() - getXDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(-remainder, 0, ent); return; } else { this.quickMoveAll2DAround(tileGridSlack, 0, ent); }remainder = remainder - tileGridSlack;ent.X += remainder;}
,"dynamic2DMoveX":
function(x, ent, tileGrid) { var movingLeft = x > 0;if (movingLeft) { this.dynamic2DMoveLeft(x, ent, tileGrid); return; } else { this.dynamic2DMoveRight(x, ent, tileGrid); return; }var tileGridSlackX = x < 0 ? -1 * tileGrid.X : tileGrid.R() - getXDrawBounds2D(); if (ent.isCenteredX() !== true) { var centerSlackX = (x < 0 ? ((getXDrawBounds2D() / 2) - ent.X) : ent.X - (getXDrawBounds2D() / 2)); if (centerSlackX > Math.abs(x)) { ent.X -= x; }else if (centerSlackX < Math.abs(x) && centerSlackX > 0) { ent.X -= centerSlackX; }  }else if (tileGridSlackX > Math.abs(x)) { this.moveAll2DAround(x, 0, ent.Name); }else if (tileGridSlackX < Math.abs(x) && tileGridSlackX > 0) { this.moveAll2DAround(tileGridSlackX, 0, ent.Name); }}
,"dynamic2DMoveY":
function(y, ent, tileGrid) { var movingUp = y > 0;if (movingUp) { this.dynamic2DMoveUp(y, ent, tileGrid); return; } else { this.dynamic2DMoveDown(y, ent, tileGrid); return; }var tileGridSlackY = y < 0 ? -1 * tileGrid.Y : tileGrid.B() - getYDrawBounds2D();if (ent.isCenteredY() !== true) { var centerSlackY = (y < 0 ? ((getYDrawBounds2D() / 2) - ent.Y) : ent.Y - (getYDrawBounds2D() / 2)); if (centerSlackY > Math.abs(y)) { ent.Y -= y; }else if (centerSlackY < Math.abs(y) && centerSlackY > 0) { ent.Y -= centerSlackY; }  }else if (tileGridSlackY > Math.abs(y)) { this.moveAll2DAround(y, 0, ent.Name); }else if (tileGridSlackY < Math.abs(y) && tileGridSlackY > 0) { this.moveAll2DAround(tileGridSlackY, 0, ent.Name); }}
,"prepareForRenderer":
 function() {return {  };}
,"loadScene":
function() { loadThrentitiesIntoNewScene(this.allThrentities(), this.PointLights); }
,"allThrentities":
function() { return game.active().Omnipresent3D.concat(this.validLocalThrentities()); }
,"validLocalThrentities":
function() { return this.Threntities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getThrentity":
function (index) { var ent = game.active().getOmni3D(index); if (ent != null) { return ent; } var obj = this.Threntities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni3D(index); } else { return this.Threntities[index]; } }
,"allEntities":
function() { return game.active().Omnipresent2D.concat(this.validLocalEntities()); }
,"validLocalEntities":
function() { return this.Entities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getEntity":
function (index) { var ent = game.active().getOmni2D(index); if (ent != null) { return ent; } var obj = this.Entities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni2D(index); } else { return this.Entities[index]; } }
,"getMainTilegrid":
function() { for(var i in this.TileGrids) { if (this.TileGrids[i].MainGrid === true) { return this.TileGrids[i]; } } return -1; }
,"shiftToTop":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = main.Y; this.moveAll2D(0, moveY); return moveY; } }
,"shiftToBottom":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = -(main.B() - getYDrawBounds2D()); this.moveAll2D(0, moveY); return moveY; } }
,"shiftToRight":
function() { if (this.shiftedToRight == true) {  }  var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = -(main.R() - getXDrawBounds2D()); this.moveAll2D(moveX, 0); this.shiftedToLeft = false; this.shiftedToRight = true; return moveX; } }
,"shiftToLeft":
function() { if (this.shiftedToLeft == true) {  } var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = main.X; this.moveAll2D(moveX, 0);  this.shiftedToLeft = true; this.shiftedToRight = false; return moveX; } }
,"shiftedToLeft":
false
,"shiftedToRight":
false
,"shiftedToTop":
false
,"shiftedToBottom":
false
,"wouldCollide":
 function(entity) {var hasCollide = false;for (var i in this.TileGrids) { if (this.TileGrids[i].wouldCollide(entity) === true) { hasCollide = true; } }var all = this.allEntities(); for (var i in all) { if (all[i].NotWorldLevel !== true && all[i].NonCorporeal !== true && all[i].Disabled !== true && all[i].Name !== entity.name && all[i].wouldCollide(entity)) { hasCollide = true; } }return hasCollide;}
,"isSetup":
false
,"XResolution":1600,"YResolution":1000,"HasAmbientLight":false,"AmbientLightIntensity":75,"AmbientLightColor":"0xffffcf","Bounds2DX":0,"Bounds2DY":0,"TileGrids":[{"setup":
function(parent) { if (this.DelimitedGrid && this.DelimitedGrid.length > 0){ var rows = this.DelimitedGrid.split(';');for (var j in rows) { this.tiles.push([]); var cells = rows[j].split(',');  for (var i in cells) { var tile=this.getTile(parent, cells[i]); this.tiles[j].push(tile); } } } }
,"getTile":
function(parentScene, tileId) {  var eName = this.EntityNameCSVKey.split(',')[tileId]; var tile = find(parentScene.allEntities(), eName); /* tile.draw = function(x,y,w,h) { this.MyImage.active().render(x,y,w,h); }; */ return tile;  }
,"draw":
function() { if (this.SkipDraw==true) { return; } for(var j in this.tiles) { for(var i in this.tiles[j]) { if (this.tiles[j][i] != null && this.tiles[j][i].MyImage != null) { this.tiles[j][i].MyImage.active().render(this.X + (i * this.TW),this.Y + (j * this.TH),this.TW,this.TH); } } } }
,"update":
 function() {}
,"tiles":
 [] 
,"R":
 function() {return this.X + (this.getWidth() * this.TW);}
,"B":
 function() {return this.Y + (this.getHeight() * this.TH);}
,"wouldCollide":
 function(entity) {for(var j in this.tiles)      {       for (var i in this.tiles[j])       {        if (this.tiles[j][i] != null && this.tiles[j][i].ForceCollision===true)        {         var x = this.X + (i * this.TW);         var y = this.Y + (j * this.TH);         if (checkOverlap({X:x,Y:y,W:this.TW,H:this.TH}, entity) === true)         {          console.log('overlap found');         var events = this.tiles[j][i].collisionEvents;         if (events !== null)         {         }         if (this.tiles[j][i].LedgeCollision === true)         {          if (/*notideal*/downkey() && !leftkey() && !rightkey())          {           console.log('ledge collision detected');           /*arbitrary*/var speed = 4;           /* make entity.MyLogic have a non null ActionBlock? */           entity.Me.MyLogic.ActionBlock.MyActions.push({Depth:((this.TH/speed)*2)+1,SelfDestruct:true,Ct:0,Destroyed:false,update:function() { console.log('updating action');  if (this.BlockInput === true) { BlockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.MyScript(); this.Ct++; } },MyTarget:entity,BlockInput:true,LocalData:speed,MyScript:function() { console.log('performing action...'); this.MyTarget.Me.Y += this.LocalData; }});          }         }         return true;         }        }       }      }       return false;}
,"getWidth":
function() { if (this.getHeight() > 0) { return this.tiles[0].length; } else { return 0; } }
,"getHeight":
function() { return this.tiles.length; }
,"EntityIndexCSVKey":"","EntityNameCSVKey":"tileExample","DelimitedGrid":"0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0;","SkipDraw":false,"MainGrid":true,"TW":128,"TH":96,"X":0,"Y":0,"Name":"","LocalData":"","TypeName":"TileGrid","Id":491}],"AdhocSceneRefs":[],"Entities":[{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7053}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6965},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6965},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"C:\\IISProj\\PlaceholderWebApp 10 Oct 2017 II\\PlaceholderWebApp\\PlaceholderWebApp\\Pages/TempImages/sampsonSeabat84_cc_tileExample0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat84tileExample0');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15109}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6965},"MyColor":"","X":0,"Y":0,"W":0,"H":0,"MX":0,"MY":0,"Disabled":true,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"tileExample","LocalData":"","TypeName":"Entity","Id":6965},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7054}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6966},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6966},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"C:\\IISProj\\PlaceholderWebApp 10 Oct 2017 II\\PlaceholderWebApp\\PlaceholderWebApp\\Pages/TempImages/sampsonSeabat84_cc_someEntXXX40.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat84someEntXXX40');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15110}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6966},"MyColor":"","X":224,"Y":16,"W":32,"H":32,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"someEntXXX4","LocalData":"","TypeName":"Entity","Id":6966},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7055}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6967},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6967},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":2,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"C:\\IISProj\\PlaceholderWebApp 10 Oct 2017 II\\PlaceholderWebApp\\PlaceholderWebApp\\Pages/TempImages/sampsonSeabat84_cc_someXEntX0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat84someXEntX0');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15111},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"C:\\IISProj\\PlaceholderWebApp 10 Oct 2017 II\\PlaceholderWebApp\\PlaceholderWebApp\\Pages/TempImages/sampsonSeabat84_cc_someXEntX1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat84someXEntX1');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15112},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"C:\\IISProj\\PlaceholderWebApp 10 Oct 2017 II\\PlaceholderWebApp\\PlaceholderWebApp\\Pages/TempImages/sampsonSeabat84_cc_someXEntX2.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat84someXEntX2');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15113},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"C:\\IISProj\\PlaceholderWebApp 10 Oct 2017 II\\PlaceholderWebApp\\PlaceholderWebApp\\Pages/TempImages/sampsonSeabat84_cc_someXEntX3.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat84someXEntX3');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15114}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6967},"MyColor":"","X":584,"Y":0,"W":180,"H":1200,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":true,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"someXEntX","LocalData":"","TypeName":"Entity","Id":6967},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { game.active().Omnipresent2D.push(this); this.MyIndex = index; return true; }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7056},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {if (this.me().MY < 96) { this.me().MY += 1; }if (game.scene().wouldCollide(this.me().transpose(0, this.me().MY))) { this.me().MY = 0; this.LocalData.isInAir = false; } else { this.me().Y += this.me().MY; }}
,"MyScript":"[%= gravity %]","Name":"gravityScript","LocalData":
{'isInAir':false}
,"TypeName":"ProceduralStatement","Id":7057}],"MyInputs":[{"me":
function() { return game.scene().getEntity(this.myParentEntity); }
,"setup":
function(index) { this.myParentEntity = index; }
,"myParentEntity":
{}
,"update":
function() { if(keyval('left')) { if (!game.scene().wouldCollide(this.me().transpose(-4,0))) {this.me().X -= 4;} } }
,"KeyPredicate":"left","MyScript":"[%= moveLeft4 %]","Name":"","LocalData":"","TypeName":"InputHandler","Id":265},{"me":
function() { return game.scene().getEntity(this.myParentEntity); }
,"setup":
function(index) { this.myParentEntity = index; }
,"myParentEntity":
{}
,"update":
function() { if(keyval('right')) { if (!game.scene().wouldCollide(this.me().transpose(4,0))) {this.me().X += 4;} } }
,"KeyPredicate":"right","MyScript":"[%= moveRight4 %]","Name":"","LocalData":"","TypeName":"InputHandler","Id":266},{"me":
function() { return game.scene().getEntity(this.myParentEntity); }
,"setup":
function(index) { this.myParentEntity = index; }
,"myParentEntity":
{}
,"update":
function() { if(keyval('space')) { if(!this.LocalData.isInAir(this).isInAir && this.me().MY === 0) { this.me().MY = -24; this.LocalData.isInAir(this).isInAir=true; } } }
,"KeyPredicate":"space","MyScript":"if(!this.LocalData.isInAir(this).isInAir && this.me().MY === 0) { this.me().MY = -24; this.LocalData.isInAir(this).isInAir=true; }","Name":"jumpKey","LocalData":
{'isInAir':function(ih) { return find(ih.me().MyLogic.OnUpdate, 'gravityScript').LocalData; } }
,"TypeName":"InputHandler","Id":267}],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6968},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6968},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":84,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"C:\\IISProj\\PlaceholderWebApp 10 Oct 2017 II\\PlaceholderWebApp\\PlaceholderWebApp\\Pages/TempImages/sampsonSeabat84_cc_JumpMan0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat84JumpMan0');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15115},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"C:\\IISProj\\PlaceholderWebApp 10 Oct 2017 II\\PlaceholderWebApp\\PlaceholderWebApp\\Pages/TempImages/sampsonSeabat84_cc_JumpMan1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat84JumpMan1');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15116}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6968},"MyColor":"F00","X":96,"Y":96,"W":32,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":true,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"JumpMan","LocalData":"","TypeName":"Entity","Id":6968},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7058}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":true,"Index":2,"MyActions":[{"me":
 function() {return game.scene().getEntity(this.myParentEntity);}
,"setup":
 function(index) {this.myParentEntity = index;}
,"update":
 function() { this.me().moveWithCargo(-1, 0);  if (this.BlockInput === true) { blockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.execMyScript(); this.Ct++; }}
,"execMyScript":
 function() { eval(this.MyScript); }
,"myParentEntity":
{}
,"MyTarget":
{}
,"BlockInput":
false
,"Destroyed":
false
,"SelfDestruct":
false
,"MyScript":"this.me().moveWithCargo(-1, 0);","Depth":128,"Ct":0,"Name":"","LocalData":"","TypeName":"ActionDescription","Id":725},{"me":
 function() {return game.scene().getEntity(this.myParentEntity);}
,"setup":
 function(index) {this.myParentEntity = index;}
,"update":
 function() { this.me().moveWithCargo(1, 0);  if (this.BlockInput === true) { blockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.execMyScript(); this.Ct++; }}
,"execMyScript":
 function() { eval(this.MyScript); }
,"myParentEntity":
{}
,"MyTarget":
{}
,"BlockInput":
false
,"Destroyed":
false
,"SelfDestruct":
false
,"MyScript":"this.me().moveWithCargo(1, 0);","Depth":128,"Ct":0,"Name":"","LocalData":"","TypeName":"ActionDescription","Id":726}],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6969},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6969},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6969},"MyColor":"00F","X":384,"Y":256,"W":96,"H":32,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"plat","Name":"","LocalData":"","TypeName":"Entity","Id":6969},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7059}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":true,"Index":2,"MyActions":[{"me":
 function() {return game.scene().getEntity(this.myParentEntity);}
,"setup":
 function(index) {this.myParentEntity = index;}
,"update":
 function() { this.me().moveWithCargo(0, -1);  if (this.BlockInput === true) { blockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.execMyScript(); this.Ct++; }}
,"execMyScript":
 function() { eval(this.MyScript); }
,"myParentEntity":
{}
,"MyTarget":
{}
,"BlockInput":
false
,"Destroyed":
false
,"SelfDestruct":
false
,"MyScript":"this.me().moveWithCargo(0, -1);","Depth":128,"Ct":0,"Name":"","LocalData":"","TypeName":"ActionDescription","Id":727},{"me":
 function() {return game.scene().getEntity(this.myParentEntity);}
,"setup":
 function(index) {this.myParentEntity = index;}
,"update":
 function() { this.me().moveWithCargo(0, 1);  if (this.BlockInput === true) { blockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.execMyScript(); this.Ct++; }}
,"execMyScript":
 function() { eval(this.MyScript); }
,"myParentEntity":
{}
,"MyTarget":
{}
,"BlockInput":
false
,"Destroyed":
false
,"SelfDestruct":
false
,"MyScript":"this.me().moveWithCargo(0, 1);","Depth":128,"Ct":0,"Name":"","LocalData":"","TypeName":"ActionDescription","Id":728}],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6970},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6970},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6970},"MyColor":"00F","X":512,"Y":-128,"W":96,"H":32,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"plat","Name":"","LocalData":"","TypeName":"Entity","Id":6970},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7060}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":true,"Index":2,"MyActions":[{"me":
 function() {return game.scene().getEntity(this.myParentEntity);}
,"setup":
 function(index) {this.myParentEntity = index;}
,"update":
 function() { this.me().moveWithCargo(0, -2);  if (this.BlockInput === true) { blockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.execMyScript(); this.Ct++; }}
,"execMyScript":
 function() { eval(this.MyScript); }
,"myParentEntity":
{}
,"MyTarget":
{}
,"BlockInput":
false
,"Destroyed":
false
,"SelfDestruct":
false
,"MyScript":"this.me().moveWithCargo(0, -2);","Depth":96,"Ct":0,"Name":"","LocalData":"","TypeName":"ActionDescription","Id":729},{"me":
 function() {return game.scene().getEntity(this.myParentEntity);}
,"setup":
 function(index) {this.myParentEntity = index;}
,"update":
 function() { this.me().moveWithCargo(0, 2);  if (this.BlockInput === true) { blockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.execMyScript(); this.Ct++; }}
,"execMyScript":
 function() { eval(this.MyScript); }
,"myParentEntity":
{}
,"MyTarget":
{}
,"BlockInput":
false
,"Destroyed":
false
,"SelfDestruct":
false
,"MyScript":"this.me().moveWithCargo(0, 2);","Depth":96,"Ct":0,"Name":"","LocalData":"","TypeName":"ActionDescription","Id":730}],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6971},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6971},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6971},"MyColor":"00F","X":960,"Y":384,"W":96,"H":32,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"plat","Name":"","LocalData":"","TypeName":"Entity","Id":6971},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7061}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6972},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6972},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"C:\\IISProj\\PlaceholderWebApp 10 Oct 2017 II\\PlaceholderWebApp\\PlaceholderWebApp\\Pages/TempImages/sampsonSeabat84_cc_someName0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat84someName0');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15117}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6972},"MyColor":"","X":4,"Y":4,"W":48,"H":48,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"someName","LocalData":"","TypeName":"Entity","Id":6972},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7062}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6973},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6973},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":18,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"C:\\IISProj\\PlaceholderWebApp 10 Oct 2017 II\\PlaceholderWebApp\\PlaceholderWebApp\\Pages/TempImages/sampsonSeabat84_cc_otherObjectName0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat84otherObjectName0');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15118},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"C:\\IISProj\\PlaceholderWebApp 10 Oct 2017 II\\PlaceholderWebApp\\PlaceholderWebApp\\Pages/TempImages/sampsonSeabat84_cc_otherObjectName1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat84otherObjectName1');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15119}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6973},"MyColor":"","X":384,"Y":4,"W":48,"H":48,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"otherObjectName","LocalData":"","TypeName":"Entity","Id":6973},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7063}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6974},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6974},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"C:\\IISProj\\PlaceholderWebApp 10 Oct 2017 II\\PlaceholderWebApp\\PlaceholderWebApp\\Pages/TempImages/sampsonSeabat84_cc_someEntX0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat84someEntX0');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15120}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6974},"MyColor":"","X":96,"Y":16,"W":32,"H":32,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"someEntX","LocalData":"","TypeName":"Entity","Id":6974},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7064}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6975},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6975},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"C:\\IISProj\\PlaceholderWebApp 10 Oct 2017 II\\PlaceholderWebApp\\PlaceholderWebApp\\Pages/TempImages/sampsonSeabat84_cc_someEntXX20.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat84someEntXX20');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15121}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6975},"MyColor":"","X":160,"Y":16,"W":32,"H":32,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"someEntXX2","LocalData":"","TypeName":"Entity","Id":6975},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7065}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6976},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6976},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"C:\\IISProj\\PlaceholderWebApp 10 Oct 2017 II\\PlaceholderWebApp\\PlaceholderWebApp\\Pages/TempImages/sampsonSeabat84_cc_someNonGSTest0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat84someNonGSTest0');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15122}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6976},"MyColor":"","X":0,"Y":0,"W":0,"H":0,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"someNonGSTest","LocalData":"","TypeName":"Entity","Id":6976},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7066}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6977},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6977},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"C:\\IISProj\\PlaceholderWebApp 10 Oct 2017 II\\PlaceholderWebApp\\PlaceholderWebApp\\Pages/TempImages/sampsonSeabat84_cc_testStairs0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat84testStairs0');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15123}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6977},"MyColor":"","X":256,"Y":288,"W":32,"H":32,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"testStairs","LocalData":"","TypeName":"Entity","Id":6977},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7067}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6978},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6978},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"C:\\IISProj\\PlaceholderWebApp 10 Oct 2017 II\\PlaceholderWebApp\\PlaceholderWebApp\\Pages/TempImages/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15124},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"C:\\IISProj\\PlaceholderWebApp 10 Oct 2017 II\\PlaceholderWebApp\\PlaceholderWebApp\\Pages/TempImages/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15125}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6978},"MyColor":"F00","X":448,"Y":384,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":6978},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7068}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6979},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6979},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15126},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15127}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6979},"MyColor":"F00","X":768,"Y":384,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":6979},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7069}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6980},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6980},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15128},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15129}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6980},"MyColor":"F00","X":1088,"Y":384,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":6980},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7070}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6981},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6981},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15130},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15131}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6981},"MyColor":"F00","X":1408,"Y":384,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":6981},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7071}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6982},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6982},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15132},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15133}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6982},"MyColor":"F00","X":288,"Y":608,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":6982},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7072}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6983},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6983},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15134},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15135}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6983},"MyColor":"F00","X":608,"Y":608,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":6983},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7073}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6984},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6984},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15136},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15137}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6984},"MyColor":"F00","X":928,"Y":608,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":6984},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7074}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6985},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6985},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15138},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15139}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6985},"MyColor":"F00","X":1248,"Y":608,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":6985},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7075}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6986},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6986},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"C:\\IISProj\\PlaceholderWebApp 10 Oct 2017 II\\PlaceholderWebApp\\PlaceholderWebApp\\Pages/TempImages/sampsonSeabat84_cc_Other0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat84Other0');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15140},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"C:\\IISProj\\PlaceholderWebApp 10 Oct 2017 II\\PlaceholderWebApp\\PlaceholderWebApp\\Pages/TempImages/sampsonSeabat84_cc_Other1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat84Other1');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15141}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6986},"MyColor":"F00","X":72,"Y":480,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"plat","ClassName":"","Name":"Other","LocalData":"","TypeName":"Entity","Id":6986},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7076}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6987},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6987},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/some_thing.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'some_thing');}
,"NameOfTarget":"some_thing","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15142}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6987},"MyColor":"","X":42,"Y":240,"W":32,"H":32,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"testCase","LocalData":"","TypeName":"Entity","Id":6987}],"Threntities":[],"PointLights":[],"MyAudio":[],"MyLogic":{"update":
 function() {for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":null,"TypeName":"SceneProceduralStatement","Id":0},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"SceneProceduralStatement","Id":697}],"Name":"","LocalData":"","TypeName":"SceneLogicBox","Id":697},"Name":"","LocalData":"","TypeName":"Scene","Id":697},{"reloadThrentities":
function() { var allT = this.allThrentities(); for(var i in allT) { setupThrentity(allT[i]); } }
,"setup":
 function() {if (this.isSetup !== true) {for(var i in this.TileGrids) { this.TileGrids[i].setup(this); } for(var i in this.PointLights) { this.PointLights[i].setup(this); } if (this.MyAudio !== null) { for (var i = 0; i < this.MyAudio.length; i++) { this.MyAudio[i].setup(); } }if (game.active().Omnipresent2D.length > 0) { var indices = this.entityIndexArray(); var allE = this.allEntities();  for(var i in allE) { if (allE[i].MyIndex != '') { var ind = indices.indexOf(allE[i].MyIndex); if(ind != -1) { indices.splice(ind, 1); } } else { allE[i].setup(indices[i]); } }  } else { for(var i in this.Entities) { this.Entities[i].setup(i); } }if (game.active().Omnipresent3D.length > 0) { var indices = this.threntityIndexArray(); var allT = this.allThrentities(); for(var i in allT) { if (allT[i].MyIndex != '') { var ind = indices.indexOf(allT[i].MyIndex); if (ind != -1) { indices.splice(ind, 1); } } else { allT[i].setup(indices[i]); } }  } else { for(var i in this.Threntities) { this.Threntities[i].setup(i); } }if (this.HasAmbientLight == true) { addAmbientLightToCurrentScene(this.AmbientLightColor, this.AmbientLightIntensity / parseFloat(100)); }this.isSetup = true; }}
,"update":
 function() {this.MyLogic.update();for(var i in this.MyAudio) { this.MyAudio[i].update(); } var allE = this.allEntities(); for(var i in allE) { allE[i].update(); }var allT = this.allThrentities(); for(var i in allT) { allT[i].update(); }for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].update(this.AdhocSceneRefs[i].TargetName); } for(var i in this.TileGrids) { this.TileGrids[i].update(); } }
,"draw":
 function() {for(var i in this.TileGrids) { this.TileGrids[i].draw(); } var allE = this.allEntities(); for(var i in allE) { if (allE[i].Disabled !== true) { allE[i].draw(); } }var allT = this.allThrentities(); for(var i in allT) { allT[i].draw(); } }
,"entityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent2D) { ray.push(game.active().Omnipresent2D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Entities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"threntityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent3D) { ray.push(game.active().Omnipresent3D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Threntities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"checkMovePoint3d":
function(point3dBefore, point3dAfter) {  var all = this.allThrentities(); for(var i in all) { if (this.checkPointCollision(all[i], point3dBefore, point3dAfter)==true) { return false; } } return true;  }
,"checkPointCollision":
function(targetThrent, point3dBefore, point3dAfter) { var xBef = point3dBefore.X;var xAft = point3dAfter.X;var yBef = point3dBefore.Y;var yAft = point3dAfter.Y;var zBef = point3dBefore.Z;var zAft = point3dAfter.Z;var minX = targetThrent.L();var maxX = targetThrent.R();var minY = targetThrent.B();var maxY = targetThrent.T();var minZ = targetThrent.A();var maxZ = targetThrent.F();var xOverlap = false; var yOverlap = false; var zOverlap = false;if (xBef<xAft) { xOverlap = this.checkRangeOverlap(xBef, xAft, minX, maxX); } else { xOverlap = this.checkRangeOverlap(xAft, xBef, minX, maxX); }if (yBef<yAft) { yOverlap = this.checkRangeOverlap(yBef, yAft, minY, maxY); } else { yOverlap = this.checkRangeOverlap(yAft, yBef, minY, maxY); }if (zBef<zAft) { zOverlap = this.checkRangeOverlap(zBef, zAft, minZ, maxZ); } else { zOverlap = this.checkRangeOverlap(zAft, zBef, minZ, maxZ); }if (xOverlap==true && yOverlap==true && zOverlap==true) { return true; } return false;}
,"checkRangeOverlap":
function (inputOneMin, inputOneMax, inputTwoMin, inputTwoMax) {if (inputOneMin > inputTwoMax || inputOneMax < inputTwoMin) { return false; }return true;}
,"threnCollideContextual":
function(thren, before, after) { var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name) { if (this.ZStraddle(before, after, all[i])===true && this.XStraddle(before, after, all[i])===true && this.YStraddle(before, after, all[i])===true) { hasCollide = true; } if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } } }return hasCollide;}
,"ZStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Z - before.Z;let secondDiff = target.Z - after.Z;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"XStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.X - before.X;let secondDiff = target.X - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"YStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Y - before.Y;let secondDiff = target.Y - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"getFirstThrenCollide":
function(thren) { var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { return thren; } } }
,"threnCollide":
 function(thren) {var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } }return hasCollide;}
,"moveAll2D":
function(x, y) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for (var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"moveAll2DAround":
function(x, y, entName) { var ent = find(game.scene().Entities, entName); if (this.wouldCollide(ent.transpose(-x, -y)) === false) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } } }
,"quickMoveAll2DAround":
function(x, y, ent) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"tryMoveAll2DAround":
function(x, y, entName) {if (this.getMainTilegrid() === -1) { return this.moveAll2DAround(x, y, entName); } else { this.dynamic2DMove(x, y, entName, this.getMainTilegrid()); } }
,"dynamic2DMove":
function(x, y, entName, tileGrid) {var ent = game.findEntity(entName);if (this.wouldCollide(ent.transpose(-x, -y)) === false) {this.dynamic2DMoveX(x, ent, tileGrid);this.dynamic2DMoveY(y, ent, tileGrid); }}
,"dynamic2DMoveUp":
function(y, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterY() === false && ent.isCenteredY() === false) ? 0 : (ent.myCenterY() - viewportCenterY());if (amtMoveHeroTowardsCenter >= y) { ent.Y -= y; return; } else { ent.Y -= amtMoveHeroTowardsCenter; }var remainder = y - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.Y;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(0, remainder, ent); return; } else { this.quickMoveAll2DAround(0, Math.abs(tileGridSlack), ent); }remainder = remainder - Math.abs(tileGridSlack);ent.Y -= remainder;}
,"dynamic2DMoveDown":
function(y, ent, tileGrid) {var absY = Math.abs(y);var amtMoveHeroTowardsCenter = (ent.isCenteredY() || ent.pastCenterY()) ? 0 : viewportCenterY() - ent.myCenterY();if (amtMoveHeroTowardsCenter >= absY) { ent.Y -= y; return; } else { ent.Y += amtMoveHeroTowardsCenter; }var remainder = absY - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.B() - getYDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(0, -remainder, ent); return; } else { this.quickMoveAll2DAround(0, tileGridSlack, ent); }remainder = remainder - tileGridSlack;ent.Y += remainder;}
,"dynamic2DMoveLeft":
function(x, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterX() === false && ent.isCenteredX() === false) ? 0 : (ent.myCenterX() - viewportCenterX());if (amtMoveHeroTowardsCenter >= x) { ent.X -= x; return; } else { ent.X -= amtMoveHeroTowardsCenter; }var remainder = x - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.X;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(remainder, 0, ent); return; } else { this.quickMoveAll2DAround(Math.abs(tileGridSlack), 0, ent); }remainder = remainder - Math.abs(tileGridSlack);ent.X -= remainder;}
,"dynamic2DMoveRight":
function(x, ent, tileGrid) {var absX = Math.abs(x);var amtMoveHeroTowardsCenter = (ent.isCenteredX() || ent.pastCenterX()) ? 0 : viewportCenterX() - ent.myCenterX();if (amtMoveHeroTowardsCenter >= absX) { ent.X -= x; return; } else { ent.X += amtMoveHeroTowardsCenter; }var remainder = absX - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.R() - getXDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(-remainder, 0, ent); return; } else { this.quickMoveAll2DAround(tileGridSlack, 0, ent); }remainder = remainder - tileGridSlack;ent.X += remainder;}
,"dynamic2DMoveX":
function(x, ent, tileGrid) { var movingLeft = x > 0;if (movingLeft) { this.dynamic2DMoveLeft(x, ent, tileGrid); return; } else { this.dynamic2DMoveRight(x, ent, tileGrid); return; }var tileGridSlackX = x < 0 ? -1 * tileGrid.X : tileGrid.R() - getXDrawBounds2D(); if (ent.isCenteredX() !== true) { var centerSlackX = (x < 0 ? ((getXDrawBounds2D() / 2) - ent.X) : ent.X - (getXDrawBounds2D() / 2)); if (centerSlackX > Math.abs(x)) { ent.X -= x; }else if (centerSlackX < Math.abs(x) && centerSlackX > 0) { ent.X -= centerSlackX; }  }else if (tileGridSlackX > Math.abs(x)) { this.moveAll2DAround(x, 0, ent.Name); }else if (tileGridSlackX < Math.abs(x) && tileGridSlackX > 0) { this.moveAll2DAround(tileGridSlackX, 0, ent.Name); }}
,"dynamic2DMoveY":
function(y, ent, tileGrid) { var movingUp = y > 0;if (movingUp) { this.dynamic2DMoveUp(y, ent, tileGrid); return; } else { this.dynamic2DMoveDown(y, ent, tileGrid); return; }var tileGridSlackY = y < 0 ? -1 * tileGrid.Y : tileGrid.B() - getYDrawBounds2D();if (ent.isCenteredY() !== true) { var centerSlackY = (y < 0 ? ((getYDrawBounds2D() / 2) - ent.Y) : ent.Y - (getYDrawBounds2D() / 2)); if (centerSlackY > Math.abs(y)) { ent.Y -= y; }else if (centerSlackY < Math.abs(y) && centerSlackY > 0) { ent.Y -= centerSlackY; }  }else if (tileGridSlackY > Math.abs(y)) { this.moveAll2DAround(y, 0, ent.Name); }else if (tileGridSlackY < Math.abs(y) && tileGridSlackY > 0) { this.moveAll2DAround(tileGridSlackY, 0, ent.Name); }}
,"prepareForRenderer":
 function() {return {  };}
,"loadScene":
function() { loadThrentitiesIntoNewScene(this.allThrentities(), this.PointLights); }
,"allThrentities":
function() { return game.active().Omnipresent3D.concat(this.validLocalThrentities()); }
,"validLocalThrentities":
function() { return this.Threntities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getThrentity":
function (index) { var ent = game.active().getOmni3D(index); if (ent != null) { return ent; } var obj = this.Threntities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni3D(index); } else { return this.Threntities[index]; } }
,"allEntities":
function() { return game.active().Omnipresent2D.concat(this.validLocalEntities()); }
,"validLocalEntities":
function() { return this.Entities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getEntity":
function (index) { var ent = game.active().getOmni2D(index); if (ent != null) { return ent; } var obj = this.Entities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni2D(index); } else { return this.Entities[index]; } }
,"getMainTilegrid":
function() { for(var i in this.TileGrids) { if (this.TileGrids[i].MainGrid === true) { return this.TileGrids[i]; } } return -1; }
,"shiftToTop":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = main.Y; this.moveAll2D(0, moveY); return moveY; } }
,"shiftToBottom":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = -(main.B() - getYDrawBounds2D()); this.moveAll2D(0, moveY); return moveY; } }
,"shiftToRight":
function() { if (this.shiftedToRight == true) {  }  var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = -(main.R() - getXDrawBounds2D()); this.moveAll2D(moveX, 0); this.shiftedToLeft = false; this.shiftedToRight = true; return moveX; } }
,"shiftToLeft":
function() { if (this.shiftedToLeft == true) {  } var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = main.X; this.moveAll2D(moveX, 0);  this.shiftedToLeft = true; this.shiftedToRight = false; return moveX; } }
,"shiftedToLeft":
false
,"shiftedToRight":
false
,"shiftedToTop":
false
,"shiftedToBottom":
false
,"wouldCollide":
 function(entity) {var hasCollide = false;for (var i in this.TileGrids) { if (this.TileGrids[i].wouldCollide(entity) === true) { hasCollide = true; } }var all = this.allEntities(); for (var i in all) { if (all[i].NotWorldLevel !== true && all[i].NonCorporeal !== true && all[i].Disabled !== true && all[i].Name !== entity.name && all[i].wouldCollide(entity)) { hasCollide = true; } }return hasCollide;}
,"isSetup":
false
,"XResolution":1600,"YResolution":1000,"HasAmbientLight":false,"AmbientLightIntensity":75,"AmbientLightColor":"0xffffcf","Bounds2DX":0,"Bounds2DY":0,"TileGrids":[{"setup":
function(parent) { if (this.DelimitedGrid && this.DelimitedGrid.length > 0){ var rows = this.DelimitedGrid.split(';');for (var j in rows) { this.tiles.push([]); var cells = rows[j].split(',');  for (var i in cells) { var tile=this.getTile(parent, cells[i]); this.tiles[j].push(tile); } } } }
,"getTile":
function(parentScene, tileId) {  var eName = this.EntityNameCSVKey.split(',')[tileId]; var tile = find(parentScene.allEntities(), eName); /* tile.draw = function(x,y,w,h) { this.MyImage.active().render(x,y,w,h); }; */ return tile;  }
,"draw":
function() { if (this.SkipDraw==true) { return; } for(var j in this.tiles) { for(var i in this.tiles[j]) { if (this.tiles[j][i] != null && this.tiles[j][i].MyImage != null) { this.tiles[j][i].MyImage.active().render(this.X + (i * this.TW),this.Y + (j * this.TH),this.TW,this.TH); } } } }
,"update":
 function() {}
,"tiles":
 [] 
,"R":
 function() {return this.X + (this.getWidth() * this.TW);}
,"B":
 function() {return this.Y + (this.getHeight() * this.TH);}
,"wouldCollide":
 function(entity) {for(var j in this.tiles)      {       for (var i in this.tiles[j])       {        if (this.tiles[j][i] != null && this.tiles[j][i].ForceCollision===true)        {         var x = this.X + (i * this.TW);         var y = this.Y + (j * this.TH);         if (checkOverlap({X:x,Y:y,W:this.TW,H:this.TH}, entity) === true)         {          console.log('overlap found');         var events = this.tiles[j][i].collisionEvents;         if (events !== null)         {         }         if (this.tiles[j][i].LedgeCollision === true)         {          if (/*notideal*/downkey() && !leftkey() && !rightkey())          {           console.log('ledge collision detected');           /*arbitrary*/var speed = 4;           /* make entity.MyLogic have a non null ActionBlock? */           entity.Me.MyLogic.ActionBlock.MyActions.push({Depth:((this.TH/speed)*2)+1,SelfDestruct:true,Ct:0,Destroyed:false,update:function() { console.log('updating action');  if (this.BlockInput === true) { BlockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.MyScript(); this.Ct++; } },MyTarget:entity,BlockInput:true,LocalData:speed,MyScript:function() { console.log('performing action...'); this.MyTarget.Me.Y += this.LocalData; }});          }         }         return true;         }        }       }      }       return false;}
,"getWidth":
function() { if (this.getHeight() > 0) { return this.tiles[0].length; } else { return 0; } }
,"getHeight":
function() { return this.tiles.length; }
,"EntityIndexCSVKey":"","EntityNameCSVKey":"tileExample","DelimitedGrid":"0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0;0,0,0,0,0,0,0,0;","SkipDraw":true,"MainGrid":true,"TW":128,"TH":96,"X":0,"Y":0,"Name":"","LocalData":"","TypeName":"TileGrid","Id":492}],"AdhocSceneRefs":[],"Entities":[{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7077}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6988},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6988},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"C:\\IISProj\\PlaceholderWebApp 10 Oct 2017 II\\PlaceholderWebApp\\PlaceholderWebApp\\Pages/TempImages/sampsonSeabat84_cc_Other20.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat84Other20');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15143},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"C:\\IISProj\\PlaceholderWebApp 10 Oct 2017 II\\PlaceholderWebApp\\PlaceholderWebApp\\Pages/TempImages/sampsonSeabat84_cc_Other21.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat84Other21');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15144}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6988},"MyColor":"F00","X":80,"Y":240,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"Other2","LocalData":"","TypeName":"Entity","Id":6988},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7078}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6989},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6989},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":2,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_someXEntX0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat84someXEntX0');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15145},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_someXEntX1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat84someXEntX1');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15146},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_someXEntX2.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat84someXEntX2');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15147},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_someXEntX3.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat84someXEntX3');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15148}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6989},"MyColor":"","X":900,"Y":0,"W":224,"H":1200,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":true,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"someXEntX","LocalData":"","TypeName":"Entity","Id":6989},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7079}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6990},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6990},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15149},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15150}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6990},"MyColor":"F00","X":184,"Y":480,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":6990},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7080}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6991},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6991},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15151},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15152}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6991},"MyColor":"F00","X":424,"Y":480,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":6991},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7081}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6992},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6992},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15154},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15153}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6992},"MyColor":"F00","X":664,"Y":480,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":6992},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7082}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6993},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6993},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15155},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15156}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6993},"MyColor":"F00","X":904,"Y":480,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":6993},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7083}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6994},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6994},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15157},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15158}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6994},"MyColor":"F00","X":1144,"Y":480,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":6994},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7084}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6995},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6995},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15159},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15160}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6995},"MyColor":"F00","X":1384,"Y":480,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":6995},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7085}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6996},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6996},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15161},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15162}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6996},"MyColor":"F00","X":1624,"Y":480,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":6996},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7086}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6997},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6997},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15163},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15164}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6997},"MyColor":"F00","X":1864,"Y":480,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":6997},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7087}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6998},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6998},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15165},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15166}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6998},"MyColor":"F00","X":24,"Y":704,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":6998},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7088}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":6999},"Name":"","LocalData":"","TypeName":"LogicBox","Id":6999},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15167},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15168}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":6999},"MyColor":"F00","X":264,"Y":704,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":6999},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7089}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":7000},"Name":"","LocalData":"","TypeName":"LogicBox","Id":7000},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15169},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15170}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":7000},"MyColor":"F00","X":504,"Y":704,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":7000},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7090}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":7001},"Name":"","LocalData":"","TypeName":"LogicBox","Id":7001},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15171},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15172}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":7001},"MyColor":"F00","X":744,"Y":704,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":7001},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7091}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":7002},"Name":"","LocalData":"","TypeName":"LogicBox","Id":7002},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15173},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15174}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":7002},"MyColor":"F00","X":984,"Y":704,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":7002},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7092}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":7003},"Name":"","LocalData":"","TypeName":"LogicBox","Id":7003},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15175},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15176}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":7003},"MyColor":"F00","X":1224,"Y":704,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":7003},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7093}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":7004},"Name":"","LocalData":"","TypeName":"LogicBox","Id":7004},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15177},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15178}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":7004},"MyColor":"F00","X":1464,"Y":704,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":7004},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7094}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":7005},"Name":"","LocalData":"","TypeName":"LogicBox","Id":7005},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15179},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15180}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":7005},"MyColor":"F00","X":1704,"Y":704,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":7005}],"Threntities":[],"PointLights":[],"MyAudio":[{"setup":
function() { if (this.Autoplay === true) { if (this.PathToMidi !== null) { this.playMidi(); } else if (this.PathToPCM !== null) { this.playPCM(); } } }
,"playMidi":
function() { activeMidi = this; MIDIjs.play(this.PathToMidi); MIDIjs.player_callback = function(ev) { if (ev.time >= activeMidi.midiLength) { activeMidi.playMidi(); } }; MIDIjs.get_duration(activeMidi.PathToMidi, function(ev) { activeMidi.storeMidiLength(ev); }); }
,"storeMidiLength":
function(length) { activeMidi.midiLength = length; }
,"midiLength":
-1
,"playPCM":
function() { var audio = new Audio(this.PathToPCM); audio.loop = true; audio.play(); }
,"getNextNote":
 function() {return this.Notes()[this.TargetNote];}
,"update":
 function() {if (this.Notes().length > 0) { if (this.timeForNext()) {this.TargetNote++; if (this.TargetNote >= this.Notes().length) {this.TargetNote = 0; } var next = this.getNextNote();playNote(next.note, next.dur, next.inst); this.offSetNextNote = context.currentTime + next.dur; }  else if (Object.keys(this.offSetNextNote).length === 0 && this.offSetNextNote.constructor == Object) { this.offSetNextNote = context.currentTime; } }}
,"timeForNext":
 function() {if (Object.keys(this.offSetNextNote).length === 0 && this.offSetNextNote.constructor === Object) { return false; } return context.currentTime >= this.offSetNextNote;}
,"offSetNextNote":
{}
,"Notes":
 function() {return [];}
,"TargetNote":
0
,"PathToMidi":"build_84/sampsonSeabat84__mystr_0.mid","PathToPCM":"","Autoplay":true,"Loop":true,"Inst":"","Name":"mystr","LocalData":"","TypeName":"SceneAudio","Id":183}],"MyLogic":{"update":
 function() {for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":null,"TypeName":"SceneProceduralStatement","Id":0},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"SceneProceduralStatement","Id":698}],"Name":"","LocalData":"","TypeName":"SceneLogicBox","Id":698},"Name":"","LocalData":"","TypeName":"Scene","Id":698},{"reloadThrentities":
function() { var allT = this.allThrentities(); for(var i in allT) { setupThrentity(allT[i]); } }
,"setup":
 function() {if (this.isSetup !== true) {for(var i in this.TileGrids) { this.TileGrids[i].setup(this); } for(var i in this.PointLights) { this.PointLights[i].setup(this); } if (this.MyAudio !== null) { for (var i = 0; i < this.MyAudio.length; i++) { this.MyAudio[i].setup(); } }if (game.active().Omnipresent2D.length > 0) { var indices = this.entityIndexArray(); var allE = this.allEntities();  for(var i in allE) { if (allE[i].MyIndex != '') { var ind = indices.indexOf(allE[i].MyIndex); if(ind != -1) { indices.splice(ind, 1); } } else { allE[i].setup(indices[i]); } }  } else { for(var i in this.Entities) { this.Entities[i].setup(i); } }if (game.active().Omnipresent3D.length > 0) { var indices = this.threntityIndexArray(); var allT = this.allThrentities(); for(var i in allT) { if (allT[i].MyIndex != '') { var ind = indices.indexOf(allT[i].MyIndex); if (ind != -1) { indices.splice(ind, 1); } } else { allT[i].setup(indices[i]); } }  } else { for(var i in this.Threntities) { this.Threntities[i].setup(i); } }if (this.HasAmbientLight == true) { addAmbientLightToCurrentScene(this.AmbientLightColor, this.AmbientLightIntensity / parseFloat(100)); }this.isSetup = true; }}
,"update":
 function() {this.MyLogic.update();for(var i in this.MyAudio) { this.MyAudio[i].update(); } var allE = this.allEntities(); for(var i in allE) { allE[i].update(); }var allT = this.allThrentities(); for(var i in allT) { allT[i].update(); }for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].update(this.AdhocSceneRefs[i].TargetName); } for(var i in this.TileGrids) { this.TileGrids[i].update(); } }
,"draw":
 function() {for(var i in this.TileGrids) { this.TileGrids[i].draw(); } var allE = this.allEntities(); for(var i in allE) { if (allE[i].Disabled !== true) { allE[i].draw(); } }var allT = this.allThrentities(); for(var i in allT) { allT[i].draw(); } }
,"entityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent2D) { ray.push(game.active().Omnipresent2D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Entities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"threntityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent3D) { ray.push(game.active().Omnipresent3D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Threntities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"checkMovePoint3d":
function(point3dBefore, point3dAfter) {  var all = this.allThrentities(); for(var i in all) { if (this.checkPointCollision(all[i], point3dBefore, point3dAfter)==true) { return false; } } return true;  }
,"checkPointCollision":
function(targetThrent, point3dBefore, point3dAfter) { var xBef = point3dBefore.X;var xAft = point3dAfter.X;var yBef = point3dBefore.Y;var yAft = point3dAfter.Y;var zBef = point3dBefore.Z;var zAft = point3dAfter.Z;var minX = targetThrent.L();var maxX = targetThrent.R();var minY = targetThrent.B();var maxY = targetThrent.T();var minZ = targetThrent.A();var maxZ = targetThrent.F();var xOverlap = false; var yOverlap = false; var zOverlap = false;if (xBef<xAft) { xOverlap = this.checkRangeOverlap(xBef, xAft, minX, maxX); } else { xOverlap = this.checkRangeOverlap(xAft, xBef, minX, maxX); }if (yBef<yAft) { yOverlap = this.checkRangeOverlap(yBef, yAft, minY, maxY); } else { yOverlap = this.checkRangeOverlap(yAft, yBef, minY, maxY); }if (zBef<zAft) { zOverlap = this.checkRangeOverlap(zBef, zAft, minZ, maxZ); } else { zOverlap = this.checkRangeOverlap(zAft, zBef, minZ, maxZ); }if (xOverlap==true && yOverlap==true && zOverlap==true) { return true; } return false;}
,"checkRangeOverlap":
function (inputOneMin, inputOneMax, inputTwoMin, inputTwoMax) {if (inputOneMin > inputTwoMax || inputOneMax < inputTwoMin) { return false; }return true;}
,"threnCollideContextual":
function(thren, before, after) { var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name) { if (this.ZStraddle(before, after, all[i])===true && this.XStraddle(before, after, all[i])===true && this.YStraddle(before, after, all[i])===true) { hasCollide = true; } if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } } }return hasCollide;}
,"ZStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Z - before.Z;let secondDiff = target.Z - after.Z;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"XStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.X - before.X;let secondDiff = target.X - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"YStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Y - before.Y;let secondDiff = target.Y - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"getFirstThrenCollide":
function(thren) { var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { return thren; } } }
,"threnCollide":
 function(thren) {var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } }return hasCollide;}
,"moveAll2D":
function(x, y) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for (var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"moveAll2DAround":
function(x, y, entName) { var ent = find(game.scene().Entities, entName); if (this.wouldCollide(ent.transpose(-x, -y)) === false) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } } }
,"quickMoveAll2DAround":
function(x, y, ent) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"tryMoveAll2DAround":
function(x, y, entName) {if (this.getMainTilegrid() === -1) { return this.moveAll2DAround(x, y, entName); } else { this.dynamic2DMove(x, y, entName, this.getMainTilegrid()); } }
,"dynamic2DMove":
function(x, y, entName, tileGrid) {var ent = game.findEntity(entName);if (this.wouldCollide(ent.transpose(-x, -y)) === false) {this.dynamic2DMoveX(x, ent, tileGrid);this.dynamic2DMoveY(y, ent, tileGrid); }}
,"dynamic2DMoveUp":
function(y, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterY() === false && ent.isCenteredY() === false) ? 0 : (ent.myCenterY() - viewportCenterY());if (amtMoveHeroTowardsCenter >= y) { ent.Y -= y; return; } else { ent.Y -= amtMoveHeroTowardsCenter; }var remainder = y - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.Y;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(0, remainder, ent); return; } else { this.quickMoveAll2DAround(0, Math.abs(tileGridSlack), ent); }remainder = remainder - Math.abs(tileGridSlack);ent.Y -= remainder;}
,"dynamic2DMoveDown":
function(y, ent, tileGrid) {var absY = Math.abs(y);var amtMoveHeroTowardsCenter = (ent.isCenteredY() || ent.pastCenterY()) ? 0 : viewportCenterY() - ent.myCenterY();if (amtMoveHeroTowardsCenter >= absY) { ent.Y -= y; return; } else { ent.Y += amtMoveHeroTowardsCenter; }var remainder = absY - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.B() - getYDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(0, -remainder, ent); return; } else { this.quickMoveAll2DAround(0, tileGridSlack, ent); }remainder = remainder - tileGridSlack;ent.Y += remainder;}
,"dynamic2DMoveLeft":
function(x, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterX() === false && ent.isCenteredX() === false) ? 0 : (ent.myCenterX() - viewportCenterX());if (amtMoveHeroTowardsCenter >= x) { ent.X -= x; return; } else { ent.X -= amtMoveHeroTowardsCenter; }var remainder = x - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.X;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(remainder, 0, ent); return; } else { this.quickMoveAll2DAround(Math.abs(tileGridSlack), 0, ent); }remainder = remainder - Math.abs(tileGridSlack);ent.X -= remainder;}
,"dynamic2DMoveRight":
function(x, ent, tileGrid) {var absX = Math.abs(x);var amtMoveHeroTowardsCenter = (ent.isCenteredX() || ent.pastCenterX()) ? 0 : viewportCenterX() - ent.myCenterX();if (amtMoveHeroTowardsCenter >= absX) { ent.X -= x; return; } else { ent.X += amtMoveHeroTowardsCenter; }var remainder = absX - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.R() - getXDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(-remainder, 0, ent); return; } else { this.quickMoveAll2DAround(tileGridSlack, 0, ent); }remainder = remainder - tileGridSlack;ent.X += remainder;}
,"dynamic2DMoveX":
function(x, ent, tileGrid) { var movingLeft = x > 0;if (movingLeft) { this.dynamic2DMoveLeft(x, ent, tileGrid); return; } else { this.dynamic2DMoveRight(x, ent, tileGrid); return; }var tileGridSlackX = x < 0 ? -1 * tileGrid.X : tileGrid.R() - getXDrawBounds2D(); if (ent.isCenteredX() !== true) { var centerSlackX = (x < 0 ? ((getXDrawBounds2D() / 2) - ent.X) : ent.X - (getXDrawBounds2D() / 2)); if (centerSlackX > Math.abs(x)) { ent.X -= x; }else if (centerSlackX < Math.abs(x) && centerSlackX > 0) { ent.X -= centerSlackX; }  }else if (tileGridSlackX > Math.abs(x)) { this.moveAll2DAround(x, 0, ent.Name); }else if (tileGridSlackX < Math.abs(x) && tileGridSlackX > 0) { this.moveAll2DAround(tileGridSlackX, 0, ent.Name); }}
,"dynamic2DMoveY":
function(y, ent, tileGrid) { var movingUp = y > 0;if (movingUp) { this.dynamic2DMoveUp(y, ent, tileGrid); return; } else { this.dynamic2DMoveDown(y, ent, tileGrid); return; }var tileGridSlackY = y < 0 ? -1 * tileGrid.Y : tileGrid.B() - getYDrawBounds2D();if (ent.isCenteredY() !== true) { var centerSlackY = (y < 0 ? ((getYDrawBounds2D() / 2) - ent.Y) : ent.Y - (getYDrawBounds2D() / 2)); if (centerSlackY > Math.abs(y)) { ent.Y -= y; }else if (centerSlackY < Math.abs(y) && centerSlackY > 0) { ent.Y -= centerSlackY; }  }else if (tileGridSlackY > Math.abs(y)) { this.moveAll2DAround(y, 0, ent.Name); }else if (tileGridSlackY < Math.abs(y) && tileGridSlackY > 0) { this.moveAll2DAround(tileGridSlackY, 0, ent.Name); }}
,"prepareForRenderer":
 function() {return {  };}
,"loadScene":
function() { loadThrentitiesIntoNewScene(this.allThrentities(), this.PointLights); }
,"allThrentities":
function() { return game.active().Omnipresent3D.concat(this.validLocalThrentities()); }
,"validLocalThrentities":
function() { return this.Threntities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getThrentity":
function (index) { var ent = game.active().getOmni3D(index); if (ent != null) { return ent; } var obj = this.Threntities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni3D(index); } else { return this.Threntities[index]; } }
,"allEntities":
function() { return game.active().Omnipresent2D.concat(this.validLocalEntities()); }
,"validLocalEntities":
function() { return this.Entities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getEntity":
function (index) { var ent = game.active().getOmni2D(index); if (ent != null) { return ent; } var obj = this.Entities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni2D(index); } else { return this.Entities[index]; } }
,"getMainTilegrid":
function() { for(var i in this.TileGrids) { if (this.TileGrids[i].MainGrid === true) { return this.TileGrids[i]; } } return -1; }
,"shiftToTop":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = main.Y; this.moveAll2D(0, moveY); return moveY; } }
,"shiftToBottom":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = -(main.B() - getYDrawBounds2D()); this.moveAll2D(0, moveY); return moveY; } }
,"shiftToRight":
function() { if (this.shiftedToRight == true) {  }  var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = -(main.R() - getXDrawBounds2D()); this.moveAll2D(moveX, 0); this.shiftedToLeft = false; this.shiftedToRight = true; return moveX; } }
,"shiftToLeft":
function() { if (this.shiftedToLeft == true) {  } var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = main.X; this.moveAll2D(moveX, 0);  this.shiftedToLeft = true; this.shiftedToRight = false; return moveX; } }
,"shiftedToLeft":
false
,"shiftedToRight":
false
,"shiftedToTop":
false
,"shiftedToBottom":
false
,"wouldCollide":
 function(entity) {var hasCollide = false;for (var i in this.TileGrids) { if (this.TileGrids[i].wouldCollide(entity) === true) { hasCollide = true; } }var all = this.allEntities(); for (var i in all) { if (all[i].NotWorldLevel !== true && all[i].NonCorporeal !== true && all[i].Disabled !== true && all[i].Name !== entity.name && all[i].wouldCollide(entity)) { hasCollide = true; } }return hasCollide;}
,"isSetup":
false
,"XResolution":1600,"YResolution":1000,"HasAmbientLight":false,"AmbientLightIntensity":75,"AmbientLightColor":"0xffffcf","Bounds2DX":1600,"Bounds2DY":1000,"TileGrids":[{"setup":
function(parent) { if (this.DelimitedGrid && this.DelimitedGrid.length > 0){ var rows = this.DelimitedGrid.split(';');for (var j in rows) { this.tiles.push([]); var cells = rows[j].split(',');  for (var i in cells) { var tile=this.getTile(parent, cells[i]); this.tiles[j].push(tile); } } } }
,"getTile":
function(parentScene, tileId) {  }
,"draw":
function() { if (this.SkipDraw==true) { return; } for(var j in this.tiles) { for(var i in this.tiles[j]) { if (this.tiles[j][i] != null && this.tiles[j][i].MyImage != null) { this.tiles[j][i].MyImage.active().render(this.X + (i * this.TW),this.Y + (j * this.TH),this.TW,this.TH); } } } }
,"update":
 function() {}
,"tiles":
 [] 
,"R":
 function() {return this.X + (this.getWidth() * this.TW);}
,"B":
 function() {return this.Y + (this.getHeight() * this.TH);}
,"wouldCollide":
 function(entity) {for(var j in this.tiles)      {       for (var i in this.tiles[j])       {        if (this.tiles[j][i] != null && this.tiles[j][i].ForceCollision===true)        {         var x = this.X + (i * this.TW);         var y = this.Y + (j * this.TH);         if (checkOverlap({X:x,Y:y,W:this.TW,H:this.TH}, entity) === true)         {          console.log('overlap found');         var events = this.tiles[j][i].collisionEvents;         if (events !== null)         {         }         if (this.tiles[j][i].LedgeCollision === true)         {          if (/*notideal*/downkey() && !leftkey() && !rightkey())          {           console.log('ledge collision detected');           /*arbitrary*/var speed = 4;           /* make entity.MyLogic have a non null ActionBlock? */           entity.Me.MyLogic.ActionBlock.MyActions.push({Depth:((this.TH/speed)*2)+1,SelfDestruct:true,Ct:0,Destroyed:false,update:function() { console.log('updating action');  if (this.BlockInput === true) { BlockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.MyScript(); this.Ct++; } },MyTarget:entity,BlockInput:true,LocalData:speed,MyScript:function() { console.log('performing action...'); this.MyTarget.Me.Y += this.LocalData; }});          }         }         return true;         }        }       }      }       return false;}
,"getWidth":
function() { if (this.getHeight() > 0) { return this.tiles[0].length; } else { return 0; } }
,"getHeight":
function() { return this.tiles.length; }
,"EntityIndexCSVKey":"","EntityNameCSVKey":"","DelimitedGrid":"","SkipDraw":true,"MainGrid":true,"TW":1600,"TH":1000,"X":32,"Y":32,"Name":"","LocalData":"","TypeName":"TileGrid","Id":0}],"AdhocSceneRefs":[],"Entities":[{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7095}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":true,"Index":2,"MyActions":[{"me":
 function() {return game.scene().getEntity(this.myParentEntity);}
,"setup":
 function(index) {this.myParentEntity = index;}
,"update":
 function() { this.me().moveWithCargo(0, -2);  if (this.BlockInput === true) { blockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.execMyScript(); this.Ct++; }}
,"execMyScript":
 function() { eval(this.MyScript); }
,"myParentEntity":
{}
,"MyTarget":
{}
,"BlockInput":
false
,"Destroyed":
false
,"SelfDestruct":
false
,"MyScript":"this.me().moveWithCargo(0, -2);","Depth":72,"Ct":0,"Name":"","LocalData":"","TypeName":"ActionDescription","Id":731},{"me":
 function() {return game.scene().getEntity(this.myParentEntity);}
,"setup":
 function(index) {this.myParentEntity = index;}
,"update":
 function() { this.me().moveWithCargo(0, 2);  if (this.BlockInput === true) { blockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.execMyScript(); this.Ct++; }}
,"execMyScript":
 function() { eval(this.MyScript); }
,"myParentEntity":
{}
,"MyTarget":
{}
,"BlockInput":
false
,"Destroyed":
false
,"SelfDestruct":
false
,"MyScript":"this.me().moveWithCargo(0, 2);","Depth":72,"Ct":0,"Name":"","LocalData":"","TypeName":"ActionDescription","Id":732}],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":7006},"Name":"","LocalData":"","TypeName":"LogicBox","Id":7006},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":0,"ImageFrames":[],"Name":"","LocalData":"","TypeName":"ImageBox","Id":7006},"MyColor":"00F","X":1136,"Y":384,"W":96,"H":32,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"plat","Name":"someUpDown","LocalData":"","TypeName":"Entity","Id":7006},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7096}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":7007},"Name":"","LocalData":"","TypeName":"LogicBox","Id":7007},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15181},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15182}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":7007},"MyColor":"F00","X":448,"Y":420,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":7007},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7097}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":7008},"Name":"","LocalData":"","TypeName":"LogicBox","Id":7008},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15183},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15184}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":7008},"MyColor":"F00","X":688,"Y":420,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":7008},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7098}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":7009},"Name":"","LocalData":"","TypeName":"LogicBox","Id":7009},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15185},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15186}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":7009},"MyColor":"F00","X":928,"Y":420,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":7009},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7099}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":7010},"Name":"","LocalData":"","TypeName":"LogicBox","Id":7010},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15187},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15188}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":7010},"MyColor":"F00","X":1168,"Y":420,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":7010},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7100}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":7011},"Name":"","LocalData":"","TypeName":"LogicBox","Id":7011},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15189},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15190}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":7011},"MyColor":"F00","X":1408,"Y":420,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":7011},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7101}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":7012},"Name":"","LocalData":"","TypeName":"LogicBox","Id":7012},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15191},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15192}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":7012},"MyColor":"F00","X":1648,"Y":420,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":7012},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7102}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":7013},"Name":"","LocalData":"","TypeName":"LogicBox","Id":7013},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15193},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15194}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":7013},"MyColor":"F00","X":288,"Y":644,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":7013},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7103}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":7014},"Name":"","LocalData":"","TypeName":"LogicBox","Id":7014},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15195},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15196}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":7014},"MyColor":"F00","X":528,"Y":644,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":7014},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7104}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":7015},"Name":"","LocalData":"","TypeName":"LogicBox","Id":7015},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15197},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15198}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":7015},"MyColor":"F00","X":768,"Y":644,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":7015},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7105}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":7016},"Name":"","LocalData":"","TypeName":"LogicBox","Id":7016},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15199},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15200}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":7016},"MyColor":"F00","X":1008,"Y":644,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":7016},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7106}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":7017},"Name":"","LocalData":"","TypeName":"LogicBox","Id":7017},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15201},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15202}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":7017},"MyColor":"F00","X":1248,"Y":644,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":7017},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7107}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":7018},"Name":"","LocalData":"","TypeName":"LogicBox","Id":7018},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":32,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat840');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15203},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat841');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15204}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":7018},"MyColor":"F00","X":1488,"Y":644,"W":128,"H":64,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":false,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"","LocalData":"","TypeName":"Entity","Id":7018},{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7108}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":7019},"Name":"","LocalData":"","TypeName":"LogicBox","Id":7019},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":2,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_someXEntX0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat84someXEntX0');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15205},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_someXEntX1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat84someXEntX1');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15206},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_someXEntX2.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat84someXEntX2');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15207},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_someXEntX3.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat84someXEntX3');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15208}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":7019},"MyColor":"","X":900,"Y":0,"W":224,"H":1200,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":true,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"someXEntX","LocalData":"","TypeName":"Entity","Id":7019}],"Threntities":[],"PointLights":[],"MyAudio":[{"setup":
function() { if (this.Autoplay === true) { if (this.PathToMidi !== null) { this.playMidi(); } else if (this.PathToPCM !== null) { this.playPCM(); } } }
,"playMidi":
function() { activeMidi = this; MIDIjs.play(this.PathToMidi); MIDIjs.player_callback = function(ev) { if (ev.time >= activeMidi.midiLength) { activeMidi.playMidi(); } }; MIDIjs.get_duration(activeMidi.PathToMidi, function(ev) { activeMidi.storeMidiLength(ev); }); }
,"storeMidiLength":
function(length) { activeMidi.midiLength = length; }
,"midiLength":
-1
,"playPCM":
function() { var audio = new Audio(this.PathToPCM); audio.loop = true; audio.play(); }
,"getNextNote":
 function() {return this.Notes()[this.TargetNote];}
,"update":
 function() {if (this.Notes().length > 0) { if (this.timeForNext()) {this.TargetNote++; if (this.TargetNote >= this.Notes().length) {this.TargetNote = 0; } var next = this.getNextNote();playNote(next.note, next.dur, next.inst); this.offSetNextNote = context.currentTime + next.dur; }  else if (Object.keys(this.offSetNextNote).length === 0 && this.offSetNextNote.constructor == Object) { this.offSetNextNote = context.currentTime; } }}
,"timeForNext":
 function() {if (Object.keys(this.offSetNextNote).length === 0 && this.offSetNextNote.constructor === Object) { return false; } return context.currentTime >= this.offSetNextNote;}
,"offSetNextNote":
{}
,"Notes":
 function() {return [];}
,"TargetNote":
0
,"PathToMidi":"build_84/sampsonSeabat84___0.mid","PathToPCM":"","Autoplay":true,"Loop":true,"Inst":"","Name":"","LocalData":"","TypeName":"SceneAudio","Id":184}],"MyLogic":{"update":
 function() {for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":null,"TypeName":"SceneProceduralStatement","Id":0},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"SceneProceduralStatement","Id":699}],"Name":"","LocalData":"","TypeName":"SceneLogicBox","Id":699},"Name":"","LocalData":"","TypeName":"Scene","Id":699},{"reloadThrentities":
function() { var allT = this.allThrentities(); for(var i in allT) { setupThrentity(allT[i]); } }
,"setup":
 function() {if (this.isSetup !== true) {for(var i in this.TileGrids) { this.TileGrids[i].setup(this); } for(var i in this.PointLights) { this.PointLights[i].setup(this); } if (this.MyAudio !== null) { for (var i = 0; i < this.MyAudio.length; i++) { this.MyAudio[i].setup(); } }if (game.active().Omnipresent2D.length > 0) { var indices = this.entityIndexArray(); var allE = this.allEntities();  for(var i in allE) { if (allE[i].MyIndex != '') { var ind = indices.indexOf(allE[i].MyIndex); if(ind != -1) { indices.splice(ind, 1); } } else { allE[i].setup(indices[i]); } }  } else { for(var i in this.Entities) { this.Entities[i].setup(i); } }if (game.active().Omnipresent3D.length > 0) { var indices = this.threntityIndexArray(); var allT = this.allThrentities(); for(var i in allT) { if (allT[i].MyIndex != '') { var ind = indices.indexOf(allT[i].MyIndex); if (ind != -1) { indices.splice(ind, 1); } } else { allT[i].setup(indices[i]); } }  } else { for(var i in this.Threntities) { this.Threntities[i].setup(i); } }if (this.HasAmbientLight == true) { addAmbientLightToCurrentScene(this.AmbientLightColor, this.AmbientLightIntensity / parseFloat(100)); }this.isSetup = true; }}
,"update":
 function() {this.MyLogic.update();for(var i in this.MyAudio) { this.MyAudio[i].update(); } var allE = this.allEntities(); for(var i in allE) { allE[i].update(); }var allT = this.allThrentities(); for(var i in allT) { allT[i].update(); }for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].update(this.AdhocSceneRefs[i].TargetName); } for(var i in this.TileGrids) { this.TileGrids[i].update(); } }
,"draw":
 function() {for(var i in this.TileGrids) { this.TileGrids[i].draw(); } var allE = this.allEntities(); for(var i in allE) { if (allE[i].Disabled !== true) { allE[i].draw(); } }var allT = this.allThrentities(); for(var i in allT) { allT[i].draw(); } }
,"entityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent2D) { ray.push(game.active().Omnipresent2D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Entities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"threntityIndexArray":
function() { var ray = []; for(var x in game.active().Omnipresent3D) { ray.push(game.active().Omnipresent3D[x].MyIndex); } var rayLen = ray.length; for(i=0;i<rayLen+this.Threntities.length;i++) { if (ray.includes((i).toString())) {  } else {  ray.push(i); } } return ray; }
,"checkMovePoint3d":
function(point3dBefore, point3dAfter) {  var all = this.allThrentities(); for(var i in all) { if (this.checkPointCollision(all[i], point3dBefore, point3dAfter)==true) { return false; } } return true;  }
,"checkPointCollision":
function(targetThrent, point3dBefore, point3dAfter) { var xBef = point3dBefore.X;var xAft = point3dAfter.X;var yBef = point3dBefore.Y;var yAft = point3dAfter.Y;var zBef = point3dBefore.Z;var zAft = point3dAfter.Z;var minX = targetThrent.L();var maxX = targetThrent.R();var minY = targetThrent.B();var maxY = targetThrent.T();var minZ = targetThrent.A();var maxZ = targetThrent.F();var xOverlap = false; var yOverlap = false; var zOverlap = false;if (xBef<xAft) { xOverlap = this.checkRangeOverlap(xBef, xAft, minX, maxX); } else { xOverlap = this.checkRangeOverlap(xAft, xBef, minX, maxX); }if (yBef<yAft) { yOverlap = this.checkRangeOverlap(yBef, yAft, minY, maxY); } else { yOverlap = this.checkRangeOverlap(yAft, yBef, minY, maxY); }if (zBef<zAft) { zOverlap = this.checkRangeOverlap(zBef, zAft, minZ, maxZ); } else { zOverlap = this.checkRangeOverlap(zAft, zBef, minZ, maxZ); }if (xOverlap==true && yOverlap==true && zOverlap==true) { return true; } return false;}
,"checkRangeOverlap":
function (inputOneMin, inputOneMax, inputTwoMin, inputTwoMax) {if (inputOneMin > inputTwoMax || inputOneMax < inputTwoMin) { return false; }return true;}
,"threnCollideContextual":
function(thren, before, after) { var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name) { if (this.ZStraddle(before, after, all[i])===true && this.XStraddle(before, after, all[i])===true && this.YStraddle(before, after, all[i])===true) { hasCollide = true; } if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } } }return hasCollide;}
,"ZStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Z - before.Z;let secondDiff = target.Z - after.Z;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"XStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.X - before.X;let secondDiff = target.X - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"YStraddle":
 function(before, after, target) {if (target.wouldCollide(before) || target.wouldCollide(after)) {return true;}let firstDiff = target.Y - before.Y;let secondDiff = target.Y - after.Y;if (firstDiff > 0 && secondDiff < 0 || firstDiff < 0 && secondDiff > 0) {return true;}return false;}
,"getFirstThrenCollide":
function(thren) { var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { return thren; } } }
,"threnCollide":
 function(thren) {var hasCollide = false;var all = this.allThrentities(); for (var i in all) { if (all[i].Name !== thren.name && all[i].wouldCollide(thren)) { hasCollide = true; } }return hasCollide;}
,"moveAll2D":
function(x, y) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for (var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"moveAll2DAround":
function(x, y, entName) { var ent = find(game.scene().Entities, entName); if (this.wouldCollide(ent.transpose(-x, -y)) === false) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } } }
,"quickMoveAll2DAround":
function(x, y, ent) { for(var i in this.TileGrids) { this.TileGrids[i].X += x; this.TileGrids[i].Y += y; } for(var i in this.AdhocSceneRefs) { this.AdhocSceneRefs[i].X += x; this.AdhocSceneRefs[i].Y += y; } var allE = this.allEntities(); for(var i in allE) { if (allE[i].NotWorldLevel) { } else { allE[i].X += x; allE[i].Y += y; } } }
,"tryMoveAll2DAround":
function(x, y, entName) {if (this.getMainTilegrid() === -1) { return this.moveAll2DAround(x, y, entName); } else { this.dynamic2DMove(x, y, entName, this.getMainTilegrid()); } }
,"dynamic2DMove":
function(x, y, entName, tileGrid) {var ent = game.findEntity(entName);if (this.wouldCollide(ent.transpose(-x, -y)) === false) {this.dynamic2DMoveX(x, ent, tileGrid);this.dynamic2DMoveY(y, ent, tileGrid); }}
,"dynamic2DMoveUp":
function(y, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterY() === false && ent.isCenteredY() === false) ? 0 : (ent.myCenterY() - viewportCenterY());if (amtMoveHeroTowardsCenter >= y) { ent.Y -= y; return; } else { ent.Y -= amtMoveHeroTowardsCenter; }var remainder = y - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.Y;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(0, remainder, ent); return; } else { this.quickMoveAll2DAround(0, Math.abs(tileGridSlack), ent); }remainder = remainder - Math.abs(tileGridSlack);ent.Y -= remainder;}
,"dynamic2DMoveDown":
function(y, ent, tileGrid) {var absY = Math.abs(y);var amtMoveHeroTowardsCenter = (ent.isCenteredY() || ent.pastCenterY()) ? 0 : viewportCenterY() - ent.myCenterY();if (amtMoveHeroTowardsCenter >= absY) { ent.Y -= y; return; } else { ent.Y += amtMoveHeroTowardsCenter; }var remainder = absY - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.B() - getYDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(0, -remainder, ent); return; } else { this.quickMoveAll2DAround(0, tileGridSlack, ent); }remainder = remainder - tileGridSlack;ent.Y += remainder;}
,"dynamic2DMoveLeft":
function(x, ent, tileGrid) {var amtMoveHeroTowardsCenter = (ent.pastCenterX() === false && ent.isCenteredX() === false) ? 0 : (ent.myCenterX() - viewportCenterX());if (amtMoveHeroTowardsCenter >= x) { ent.X -= x; return; } else { ent.X -= amtMoveHeroTowardsCenter; }var remainder = x - amtMoveHeroTowardsCenter;var tileGridSlack = 0 - tileGrid.X;if (remainder <= Math.abs(tileGridSlack)) { this.quickMoveAll2DAround(remainder, 0, ent); return; } else { this.quickMoveAll2DAround(Math.abs(tileGridSlack), 0, ent); }remainder = remainder - Math.abs(tileGridSlack);ent.X -= remainder;}
,"dynamic2DMoveRight":
function(x, ent, tileGrid) {var absX = Math.abs(x);var amtMoveHeroTowardsCenter = (ent.isCenteredX() || ent.pastCenterX()) ? 0 : viewportCenterX() - ent.myCenterX();if (amtMoveHeroTowardsCenter >= absX) { ent.X -= x; return; } else { ent.X += amtMoveHeroTowardsCenter; }var remainder = absX - amtMoveHeroTowardsCenter;var tileGridSlack = tileGrid.R() - getXDrawBounds2D();if (remainder <= tileGridSlack) { this.quickMoveAll2DAround(-remainder, 0, ent); return; } else { this.quickMoveAll2DAround(tileGridSlack, 0, ent); }remainder = remainder - tileGridSlack;ent.X += remainder;}
,"dynamic2DMoveX":
function(x, ent, tileGrid) { var movingLeft = x > 0;if (movingLeft) { this.dynamic2DMoveLeft(x, ent, tileGrid); return; } else { this.dynamic2DMoveRight(x, ent, tileGrid); return; }var tileGridSlackX = x < 0 ? -1 * tileGrid.X : tileGrid.R() - getXDrawBounds2D(); if (ent.isCenteredX() !== true) { var centerSlackX = (x < 0 ? ((getXDrawBounds2D() / 2) - ent.X) : ent.X - (getXDrawBounds2D() / 2)); if (centerSlackX > Math.abs(x)) { ent.X -= x; }else if (centerSlackX < Math.abs(x) && centerSlackX > 0) { ent.X -= centerSlackX; }  }else if (tileGridSlackX > Math.abs(x)) { this.moveAll2DAround(x, 0, ent.Name); }else if (tileGridSlackX < Math.abs(x) && tileGridSlackX > 0) { this.moveAll2DAround(tileGridSlackX, 0, ent.Name); }}
,"dynamic2DMoveY":
function(y, ent, tileGrid) { var movingUp = y > 0;if (movingUp) { this.dynamic2DMoveUp(y, ent, tileGrid); return; } else { this.dynamic2DMoveDown(y, ent, tileGrid); return; }var tileGridSlackY = y < 0 ? -1 * tileGrid.Y : tileGrid.B() - getYDrawBounds2D();if (ent.isCenteredY() !== true) { var centerSlackY = (y < 0 ? ((getYDrawBounds2D() / 2) - ent.Y) : ent.Y - (getYDrawBounds2D() / 2)); if (centerSlackY > Math.abs(y)) { ent.Y -= y; }else if (centerSlackY < Math.abs(y) && centerSlackY > 0) { ent.Y -= centerSlackY; }  }else if (tileGridSlackY > Math.abs(y)) { this.moveAll2DAround(y, 0, ent.Name); }else if (tileGridSlackY < Math.abs(y) && tileGridSlackY > 0) { this.moveAll2DAround(tileGridSlackY, 0, ent.Name); }}
,"prepareForRenderer":
 function() {return {  };}
,"loadScene":
function() { loadThrentitiesIntoNewScene(this.allThrentities(), this.PointLights); }
,"allThrentities":
function() { return game.active().Omnipresent3D.concat(this.validLocalThrentities()); }
,"validLocalThrentities":
function() { return this.Threntities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getThrentity":
function (index) { var ent = game.active().getOmni3D(index); if (ent != null) { return ent; } var obj = this.Threntities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni3D(index); } else { return this.Threntities[index]; } }
,"allEntities":
function() { return game.active().Omnipresent2D.concat(this.validLocalEntities()); }
,"validLocalEntities":
function() { return this.Entities.filter(function(obj) { return Object.keys(obj).length > 0; }); }
,"getEntity":
function (index) { var ent = game.active().getOmni2D(index); if (ent != null) { return ent; } var obj = this.Entities[index]; if (obj == null || Object.keys(obj).length == 0) { return game.active().getOmni2D(index); } else { return this.Entities[index]; } }
,"getMainTilegrid":
function() { for(var i in this.TileGrids) { if (this.TileGrids[i].MainGrid === true) { return this.TileGrids[i]; } } return -1; }
,"shiftToTop":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = main.Y; this.moveAll2D(0, moveY); return moveY; } }
,"shiftToBottom":
function() {  var main = this.getMainTilegrid(); if (main !== -1) { var moveY = -(main.B() - getYDrawBounds2D()); this.moveAll2D(0, moveY); return moveY; } }
,"shiftToRight":
function() { if (this.shiftedToRight == true) {  }  var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = -(main.R() - getXDrawBounds2D()); this.moveAll2D(moveX, 0); this.shiftedToLeft = false; this.shiftedToRight = true; return moveX; } }
,"shiftToLeft":
function() { if (this.shiftedToLeft == true) {  } var main = this.getMainTilegrid(); if (main !== -1) {  var moveX = main.X; this.moveAll2D(moveX, 0);  this.shiftedToLeft = true; this.shiftedToRight = false; return moveX; } }
,"shiftedToLeft":
false
,"shiftedToRight":
false
,"shiftedToTop":
false
,"shiftedToBottom":
false
,"wouldCollide":
 function(entity) {var hasCollide = false;for (var i in this.TileGrids) { if (this.TileGrids[i].wouldCollide(entity) === true) { hasCollide = true; } }var all = this.allEntities(); for (var i in all) { if (all[i].NotWorldLevel !== true && all[i].NonCorporeal !== true && all[i].Disabled !== true && all[i].Name !== entity.name && all[i].wouldCollide(entity)) { hasCollide = true; } }return hasCollide;}
,"isSetup":
false
,"XResolution":1600,"YResolution":1000,"HasAmbientLight":false,"AmbientLightIntensity":75,"AmbientLightColor":"0xffffcf","Bounds2DX":1600,"Bounds2DY":1000,"TileGrids":[{"setup":
function(parent) { if (this.DelimitedGrid && this.DelimitedGrid.length > 0){ var rows = this.DelimitedGrid.split(';');for (var j in rows) { this.tiles.push([]); var cells = rows[j].split(',');  for (var i in cells) { var tile=this.getTile(parent, cells[i]); this.tiles[j].push(tile); } } } }
,"getTile":
function(parentScene, tileId) {  }
,"draw":
function() { if (this.SkipDraw==true) { return; } for(var j in this.tiles) { for(var i in this.tiles[j]) { if (this.tiles[j][i] != null && this.tiles[j][i].MyImage != null) { this.tiles[j][i].MyImage.active().render(this.X + (i * this.TW),this.Y + (j * this.TH),this.TW,this.TH); } } } }
,"update":
 function() {}
,"tiles":
 [] 
,"R":
 function() {return this.X + (this.getWidth() * this.TW);}
,"B":
 function() {return this.Y + (this.getHeight() * this.TH);}
,"wouldCollide":
 function(entity) {for(var j in this.tiles)      {       for (var i in this.tiles[j])       {        if (this.tiles[j][i] != null && this.tiles[j][i].ForceCollision===true)        {         var x = this.X + (i * this.TW);         var y = this.Y + (j * this.TH);         if (checkOverlap({X:x,Y:y,W:this.TW,H:this.TH}, entity) === true)         {          console.log('overlap found');         var events = this.tiles[j][i].collisionEvents;         if (events !== null)         {         }         if (this.tiles[j][i].LedgeCollision === true)         {          if (/*notideal*/downkey() && !leftkey() && !rightkey())          {           console.log('ledge collision detected');           /*arbitrary*/var speed = 4;           /* make entity.MyLogic have a non null ActionBlock? */           entity.Me.MyLogic.ActionBlock.MyActions.push({Depth:((this.TH/speed)*2)+1,SelfDestruct:true,Ct:0,Destroyed:false,update:function() { console.log('updating action');  if (this.BlockInput === true) { BlockInput(); } if (this.SelfDestruct === true && this.Ct + 1 == this.Depth) { this.Destroyed = true; } if (this.Destroyed !== true) { this.MyScript(); this.Ct++; } },MyTarget:entity,BlockInput:true,LocalData:speed,MyScript:function() { console.log('performing action...'); this.MyTarget.Me.Y += this.LocalData; }});          }         }         return true;         }        }       }      }       return false;}
,"getWidth":
function() { if (this.getHeight() > 0) { return this.tiles[0].length; } else { return 0; } }
,"getHeight":
function() { return this.tiles.length; }
,"EntityIndexCSVKey":"","EntityNameCSVKey":"","DelimitedGrid":"","SkipDraw":true,"MainGrid":true,"TW":1600,"TH":1000,"X":32,"Y":32,"Name":"","LocalData":"","TypeName":"TileGrid","Id":0}],"AdhocSceneRefs":[],"Entities":[{"setup":
function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } 
,"cycleLogic":
function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } 
,"update":
function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } 
,"draw":
 function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }}
,"transpose":
function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; }
,"checkOmnipresence":
function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } }
,"makeOmnipresent":
function(index) { return false; /* not omnipresent */ }
,"center":
 function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };}
,"R":
 function() {return this.X + this.W;}
,"B":
 function() {return this.Y + this.H;}
,"isAdjacent":
 function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;}
,"isCentered":
function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); }
,"pastCenterX":
function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); }
,"pastCenterY":
function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); }
,"isCenteredX":
function() { return this.myCenterX()===(getXDrawBounds2D()/2);  }
,"isCenteredY":
function() { return this.myCenterY()===(getYDrawBounds2D()/2); }
,"myCenterX":
function() { return this.X + (this.W/2);  }
,"myCenterY":
function() { return this.Y + (this.H/2); }
,"myCenter":
function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  }
,"wouldCollide":
 function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());}
,"move":
function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; }
,"isCarrying":
function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); }
,"isAtop":
function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); }
,"getThoseAtop":
 function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; }
,"moveWithCargo":
function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); }
,"destroyMe":
function() { game.scene().Entities[this.MyIndex] = {}; }
,"MyLogic":{"setup":
function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  }
,"update":
 function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":"","TypeName":"ProceduralStatement","Id":0},{"setup":
function(index) { this.setupParent(index);   }
,"me":
function() { return game.active().active().getEntity(this.myParentEntity); }
,"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"ProceduralStatement","Id":7109}],"MyInputs":[],"ActionBlock":{"active":
 function() {return this.MyActions[this.Index];}
,"update":
 function() {if (this.Index < this.MyActions.length) { if (this.active().Ct + 1 < this.active().Depth) { this.active().update(); } else { this.active().Ct = 0; this.Index++; } } else { if (this.AutoRun) { this.Index = 0; this.update(); } }}
,"run":
 function() {this.Index = 0;}
,"setup":
 function(index) {for(var i in this.MyActions) { this.MyActions[i].setup(index); } }
,"AutoRun":false,"Index":0,"MyActions":[],"Name":"","LocalData":"","TypeName":"ActionDescriptionBlock","Id":7020},"Name":"","LocalData":"","TypeName":"LogicBox","Id":7020},"MyImage":{"active":
 function() {return this.ImageFrames[this.Target];}
,"Target":0,"CycleLength":2,"ImageFrames":[{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_someXEntX0.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat84someXEntX0');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15209},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_someXEntX1.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat84someXEntX1');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15210},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_someXEntX2.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat84someXEntX2');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15211},{"hasImagePath":
 function() {return true;}
,"imageFilePath":"build_84/sampsonSeabat84_cc_someXEntX3.png","render":
 function(x,y,w,h) {/*alert(x.toString() + ' and y='+ y.toString());*/ drawImage(x,y,w,h,'sampsonSeabat84someXEntX3');}
,"NameOfTarget":"","Name":"","LocalData":"","TypeName":"ImageFrame","Id":15212}],"Name":"","LocalData":"","TypeName":"ImageBox","Id":7020},"MyColor":"","X":900,"Y":0,"W":224,"H":1200,"MX":0,"MY":0,"Disabled":false,"MyIndex":"","Omnipresent":false,"NotWorldLevel":true,"NonCorporeal":false,"ForceCollision":false,"LedgeCollision":false,"AnimationCount":0,"IsAOPObject":
function() { return true; }
,"ModelName":"","ClassName":"","Name":"someXEntX","LocalData":"","TypeName":"Entity","Id":7020}],"Threntities":[],"PointLights":[],"MyAudio":[],"MyLogic":{"update":
 function() {for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":null,"Name":null,"LocalData":null,"TypeName":"SceneProceduralStatement","Id":0},{"myParentEntity":
{}
,"setupParent":
 function(index) {this.myParentEntity = index;}
,"invoke":
 function() {}
,"MyScript":"","Name":"","LocalData":"","TypeName":"SceneProceduralStatement","Id":700}],"Name":"","LocalData":"","TypeName":"SceneLogicBox","Id":700},"Name":"","LocalData":"","TypeName":"Scene","Id":700}],"MyLogic":{"update":
 function() {for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } }
,"OnUpdate":[],"Name":"","LocalData":"","TypeName":"SceneContextLogicBox","Id":130},"MyDashboard":{"draw":
 function() {for(var i in this.MyLabels) { this.MyLabels[i].render(); } for(var i in this.MyBars) { this.MyBars[i].render(); } }
,"initialize":
function() { for(var i in this.MyLabels) { this.MyLabels[i].ParentDash = this; }for(var i in this.MyBars) { this.MyBars[i].ParentDash = this; }}
,"MyLabels":[],"MyBars":[],"Name":"","LocalData":"","TypeName":"Dashboard","Id":130},"KeyHandlers":[{"isDown":
 function() { return keyval('up'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"up","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('down'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"down","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('left'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"left","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('right'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"right","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('a'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"a","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('s'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"s","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('d'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"d","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('f'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"f","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('q'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"q","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('w'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"w","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('e'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"e","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('r'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"r","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('space'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"space","Name":null,"LocalData":null,"TypeName":"KeyHandler","Id":0},{"isDown":
 function() { return keyval('up'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"up","Name":"","LocalData":"","TypeName":"KeyHandler","Id":1678},{"isDown":
 function() { return keyval('down'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"down","Name":"","LocalData":"","TypeName":"KeyHandler","Id":1679},{"isDown":
 function() { return keyval('left'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"left","Name":"","LocalData":"","TypeName":"KeyHandler","Id":1680},{"isDown":
 function() { return keyval('right'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"right","Name":"","LocalData":"","TypeName":"KeyHandler","Id":1681},{"isDown":
 function() { return keyval('a'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"a","Name":"","LocalData":"","TypeName":"KeyHandler","Id":1682},{"isDown":
 function() { return keyval('s'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"s","Name":"","LocalData":"","TypeName":"KeyHandler","Id":1683},{"isDown":
 function() { return keyval('d'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"d","Name":"","LocalData":"","TypeName":"KeyHandler","Id":1684},{"isDown":
 function() { return keyval('f'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"f","Name":"","LocalData":"","TypeName":"KeyHandler","Id":1685},{"isDown":
 function() { return keyval('q'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"q","Name":"","LocalData":"","TypeName":"KeyHandler","Id":1686},{"isDown":
 function() { return keyval('w'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"w","Name":"","LocalData":"","TypeName":"KeyHandler","Id":1687},{"isDown":
 function() { return keyval('e'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"e","Name":"","LocalData":"","TypeName":"KeyHandler","Id":1688},{"isDown":
 function() { return keyval('r'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"r","Name":"","LocalData":"","TypeName":"KeyHandler","Id":1689},{"isDown":
 function() { return keyval('space'); }
,"isNewPress":
 function() {return this.isDown() && !this.wasDown;}
,"update":
 function() {this.wasDown = this.isDown()}
,"wasDown":
false
,"KeyName":"space","Name":"","LocalData":"","TypeName":"KeyHandler","Id":1690}],"XResolution2D":"1.0","YResolution2D":"1.0","getOmni2D":
function(index) { for(var i in this.Omnipresent2D) { if (this.Omnipresent2D[i].MyIndex == index) { return this.Omnipresent2D[i]; } } }
,"getOmni3D":
function(index) { for(var i in this.Omnipresent3D) { if (this.Omnipresent3D[i].MyIndex == index) { return this.Omnipresent3D[i]; } } }
,"Omnipresent2D":
[]
,"Omnipresent3D":
[]
,"SceneGrids":[{"update":
function(target) { for(var i in this.SceneRefs) { if (this.SceneRefs[i].LocalScene === game.active().Target) { this.SceneRefs[i].update(target); } } }
,"TargetEntity":"JumpMan","DelimitedGrid":"0,1;2,3","SceneList":"","WorldWrap":false,"SceneRefs":[{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":1048,"W":1024,"H":12,"TargetX":0,"TargetY":-24,"SkipXMove":true,"SkipYMove":false,"TargetScene":2,"LocalScene":0,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":1088,"Y":0,"W":16,"H":768,"TargetX":-32,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":1,"LocalScene":0,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":1048,"W":1024,"H":12,"TargetX":0,"TargetY":-24,"SkipXMove":true,"SkipYMove":false,"TargetScene":3,"LocalScene":1,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":-64,"Y":0,"W":16,"H":768,"TargetX":1536,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":0,"LocalScene":1,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":-500,"W":0,"H":125,"TargetX":0,"TargetY":500,"SkipXMove":true,"SkipYMove":false,"TargetScene":0,"LocalScene":2,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":800,"Y":0,"W":200,"H":0,"TargetX":-400,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":3,"LocalScene":2,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":0,"Y":-500,"W":0,"H":125,"TargetX":0,"TargetY":500,"SkipXMove":true,"SkipYMove":false,"TargetScene":1,"LocalScene":3,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0},{"update":
function(target) { var t = game.findEntity(target); if (t === null) { alert('could not find ' + target); } else if (this.criteria(t) === true) { this.changeScenes(t); } }
,"criteria":
function(ent) { return wouldCollide(ent, this.bounds()); }
,"bounds":
function() { return {X:this.X,Y:this.Y,W:this.W,H:this.H}; }
,"changeScenes":
function(ent) {  game.active().setScene(this.TargetScene); this.moveTarget(ent); /* ent.X and ent.Y should be appropriately changed*/ }
,"moveTarget":
function(ent) { if (this.SkipXMove !== true) { var xMove = 0; if (ent.X > this.TargetX) { xMove = game.scene().shiftToLeft(); } else { xMove = game.scene().shiftToRight(); } ent.X = this.TargetX; this.X += (xMove*4); } if (this.SkipYMove !== true) { var yMove = 0; if (ent.Y > this.TargetY) { yMove = game.scene().shiftToTop(); } else { yMove = game.scene().shiftToBottom(); } ent.Y = this.TargetY; this.Y += yMove; } }
,"X":-800,"Y":0,"W":200,"H":0,"TargetX":800,"TargetY":0,"SkipXMove":false,"SkipYMove":true,"TargetScene":2,"LocalScene":3,"Name":null,"LocalData":null,"TypeName":"SceneRef","Id":0}],"Name":"","LocalData":"","TypeName":"SceneGrid","Id":120}],"SceneCubes":[],"Name":"","LocalData":"","TypeName":"SceneContext","Id":130}],"EventBoard":{"setEventValue":
 function(nameOf,value) {for(var i in this.EventItems) { if (this.EventItems[i].Name == nameOf) { this.EventItems[i].Value = value; return 'success'; } } this.addEvent(nameOf,value);}
,"addEvent":
 function(nameOf,value) {this.EventItems.push({Name:nameOf,Value:value})}
,"getEventValue":
 function(nameOf) {for (var i in this.EventItems) { if (this.EventItems[i].Name == nameOf) { return this.EventItems[i].Value; } } return 'null';}
,"webServiceUrl":
 function(loadVsSave) {var locRef = location.href; var segments = locRef.split('/'); locRef = segments[0] + '//' + segments[2] + '/AccessObject.asmx/' + (loadVsSave ? 'Load' : 'Save') + 'Game'; return locRef;}
,"loadGame":
 function(targetIndex) {var newData = '';function storeData(data) { xData = data.substring(data.indexOf('http://clearwinggames.com/') + 28); xData = xData.replace('</string>',''); alert(xData); newData = xData; integrateData(xData); }var loadObj = {GameSave:{},GameName:game.Name,TargetIndex:targetIndex};$.get(this.webServiceUrl(true),'jsonObject=' + JSON.stringify(loadObj),function(data){ alert(data); storeData(data); },'text');function integrateData(xData) {alert('running ' + xData + 'against eventboard.');var newObj = jQuery.parseJSON(xData);for (var i in newObj.Deliverable.DataItems) {if (game.EventBoard.getEventValue(newObj.Deliverable.DataItems[i].Name) !== 'null') { game.EventBoard.setEventValue(newObj.Deliverable.DataItems[i].Name, newObj.Deliverable.DataItems[i].Value); } else {game.EventBoard.EventItems.push({ Value: newObj.Deliverable.DataItems[i].Value }); }}}}
,"saveGame":
 function(targetIndex) {var saveObj = {DataItems: [], GameName: game.Name, TargetIndex:targetIndex };for(var i in this.EventItems) {saveObj.DataItems.push({ Name:this.EventItems[i].Name, Value: this.EventItems[i].Value });}$.post(this.webServiceUrl(false), 'jsonObject=' + JSON.stringify(saveObj), function(data) { alert(data); }, 'text');}
,"EventItems":[],"Name":"","LocalData":"","TypeName":"EventBoard","Id":130},"DataLibrary":{"updateDashboardTo":
function(nameOf) { let dash = this.getViewByName(nameOf).asDashboard(); game.active().MyDashboard = dash; }
,"getViewByName":
function(nameOf) { for (var i in this.DataViews) { if (this.DataViews[i].Name==nameOf) { return this.DataViews[i]; } } }
,"getModelByName":
 function(name) { for(var i in this.DataModels) {if (this.DataModels[i].Name == name) { return this.DataModels[i]; }}return null;}
,"DataModels":[],"DataViews":[],"Name":"","LocalData":"","TypeName":"DataLibrary","Id":130},"AOPEngine":{"setup":
 function() {for(var i in this.AdviceBlocks) { this.AdviceBlocks[i].setup(); }  console.log('aops');}
,"AdviceBlocks":[{"setup":
function() { console.log('adviceblock setup'); if (this.Selector != null && this.Selector.length > 0) { this.applyToObjects(); } }
,"applyToObjects":
function() { this.getAllApplicableObjects(); this.getModel(); for(var i in this.applicableObjects) { if (this.applicableObjects[i].ModelName!=this.Selector) { this.applyToObject(this.applicableObjects[i]); } } }
,"applyToObject":
function(obj) { for(var i in this.Advices) { if (this.hasModel()==true) { this.Advices[i].applyModelToObject(obj, this.getModel()); } else { this.Advices[i].applyToObject(obj); } } }
,"applicableObjects":
{}
,"getApplicableDashObjects":
function(dash) { let objects = []; for (var i in dash.MyBars) { if (this.Selector==dash.MyBars[i].ClassName || this.Selector==dash.MyBars[i].ModelName) objects.push(dash.MyBars[i]); } for (var i in dash.MyLabels) { if (this.Selector==dash.MyLabels[i].ClassName || this.Selector==dash.MyLabels[i].ModelName) objects.push(dash.MyLabels[i]); } return objects; }
,"getApplicableSceneObjects":
function(scene) { let objects = []; for(var i in scene.Entities) { if (this.Selector==scene.Entities[i].ClassName || this.Selector==scene.Entities[i].ModelName) objects.push(scene.Entities[i]); } for(var i in scene.Threntities) {  if (this.Selector==scene.Threntities[i].ClassName || this.Selector==scene.Threntities[i].ModelName) objects.push(scene.Threntities[i]); } return objects; }
,"getAllApplicableObjects":
function() { var objects = []; for(var sc in game.SceneContexts) {let dash = game.SceneContexts[sc].MyDashboard;let dashObjects = this.getApplicableDashObjects(dash);for (var i in dashObjects) {objects.push(dashObjects[i]);}for(var s in game.SceneContexts[sc].Scenes) {let scene = game.SceneContexts[sc].Scenes[s];let sceneObjects = this.getApplicableSceneObjects(scene);for (var i in sceneObjects) {objects.push(sceneObjects[i]);}}} this.applicableObjects = objects; }
,"getModel":
function() { if (this.hasModel()==false) { this.model = this.findModel(); } return this.model; }
,"findModel":
function() { for(var i in this.applicableObjects) { if (this.applicableObjects[i].ModelName==this.Selector) { return this.applicableObjects[i]; } } }
,"hasModel":
function() { let isEmpty = game.isObjectEmpty(this.model); if (isEmpty==true) { return false; } else { return true; } }
,"model":
{}
,"Selector":"plat","Advices":[{"applyToObject":
function(target) {console.log('ato');target[this.PropName] = this.PropValue;}
,"applyModelToObject":
function(target, model) {console.log('amto');target[this.PropName] = model[this.PropName];}
,"PropName":"MyImage","PropValue":"","Name":"","LocalData":"","TypeName":"Advice","Id":92}],"Name":"","LocalData":"","TypeName":"AdviceBlock","Id":92}],"Name":"","LocalData":"","TypeName":"AOPEngine","Id":130},"Classes":
{Entity: function Entity(){this.MyLogic = new game.Classes.LogicBox();;this.MyImage = new game.Classes.ImageBox();;this.MyColor = null;this.X = 0;this.Y = 0;this.W = 32;this.H = 32;this.MX = null;this.MY = null;this.Disabled = null;this.MyIndex = null;this.Omnipresent = null;this.NotWorldLevel = null;this.NonCorporeal = null;this.ForceCollision = null;this.LedgeCollision = null;this.AnimationCount = null;this.ModelName = null;this.ClassName = null;this.Name = null;this.LocalData = null;this.Id = null;this.setup = function(index) {  this.MyLogic.setup(index);  this.makeOmnipresent(index); } ;this.cycleLogic = function() { if (this.AnimationCount >= this.MyImage.CycleLength) { this.AnimationCount = 0; if (this.MyImage.ImageFrames.length <= this.MyImage.Target + 1) { this.MyImage.Target = 0; } else { this.MyImage.Target++; } } else { this.AnimationCount++; } } ;this.update = function() { if(this.checkOmnipresence()) { this.MyLogic.update(); if (this.MyImage.CycleLength > 0) { this.cycleLogic(); } } } ;this.draw =  function() {if (this.MyImage.ImageFrames.length > 0) { this.MyImage.active().render(this.X, this.Y, this.W, this.H); } else { drawRectangle(this.X, this.Y, this.W, this.H, this.MyColor); }};this.transpose = function(xDisp, yDisp) { return { Me: this, MyLogic: this.MyLogic, name: this.Name, X: this.X + xDisp, Y: this.Y + yDisp, W: this.W, H: this.H  }; };this.checkOmnipresence = function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Entities[this.MyIndex] = {}; return false; } };this.makeOmnipresent = function(index) { return false; /* not omnipresent */ };this.center =  function() {return { x: this.X + (this.W / 2), y: this.Y + (this.H / 2) };};this.R =  function() {return this.X + this.W;};this.B =  function() {return this.Y + this.H;};this.isAdjacent =  function(entity) {return this.X == entity.X + entity.W || this.R() == entity.X || this.Y == entity.Y + entity.H || this.B() == entity.Y;};this.isCentered = function() { var myCenter = this.myCenter(); return myCenter.X===(getXDrawBounds2D() / 2)&&myCenter.Y===(getYDrawBounds2D() / 2); };this.pastCenterX = function() { return (this.myCenterX() > (getXDrawBounds2D()/2)); };this.pastCenterY = function() { return (this.myCenterY() > (getYDrawBounds2D()/2)); };this.isCenteredX = function() { return this.myCenterX()===(getXDrawBounds2D()/2);  };this.isCenteredY = function() { return this.myCenterY()===(getYDrawBounds2D()/2); };this.myCenterX = function() { return this.X + (this.W/2);  };this.myCenterY = function() { return this.Y + (this.H/2); };this.myCenter = function() { return {X:this.X + (this.W/2),Y:this.Y + (this.H/2)};  };this.wouldCollide =  function(entity) {return (entity.X + entity.W > this.X && entity.X < this.R() && entity.Y + entity.H > this.Y && entity.Y < this.B());};this.move = function(xAmt, yAmt) { this.X += xAmt; this.Y += yAmt; };this.isCarrying = function(other) { return this.Y == other.B() && this.R() > other.X && this.X < other.R(); };this.isAtop = function(other) { return this.B() == other.Y && this.R() > other.X && this.X < other.R(); };this.getThoseAtop =  function() { let those = game.scene().allEntities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; };this.moveWithCargo = function(xAmt, yAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt); } this.move(xAmt, yAmt); };this.destroyMe = function() { game.scene().Entities[this.MyIndex] = {}; };this.IsAOPObject = function() { return true; };this.TypeName = Entity;},Threntity: function Threntity(){this.MyIndex = null;this.MX = null;this.MY = null;this.MZ = null;this.prevMY = null;this.W = null;this.H = null;this.D = null;this.TileX = null;this.TileY = null;this.Omnipresent = null;this.AnimationCount = null;this.MyLogic = null;this.MyTexture = null;this.UpTexture = null;this.DownTexture = null;this.EastTexture = null;this.WestTexture = null;this.NorthTexture = null;this.SouthTexture = null;this.MyPrimitives = null;this.X = null;this.Y = null;this.Z = null;this.ModelName = null;this.ClassName = null;this.Name = null;this.LocalData = null;this.Id = null;this.drop =  function() {game.scene().Threntities.splice(this.MyIndex, 1);};this.transpose =  function(xDisp,yDisp,zDisp) {let newThrent = new cwg.Threntity(); newThrent.name = this.Name; newThrent.X = this.X + xDisp; newThrent.Y = this.Y + yDisp; newThrent.Z = this.Z + zDisp; newThrent.H = this.H; newThrent.W = this.W; newThrent.D = this.D; return newThrent;};this.setup =  function(index) {this.MyIndex = index;for (var i in this.MyPrimitives) { this.MyPrimitives[i].setup(this); }setupThrentity(this);this.MyLogic.setup(index);this.makeOmnipresent(index);};this.cycleLogic = function() { if (this.MyTexture.CycleLength > 0) {if (this.AnimationCount >= this.MyTexture.CycleLength) { this.AnimationCount = 0; if (this.MyTexture.ImageFrames.length <= this.MyTexture.Target + 1) { this.setImageTarget(0); } else { this.setImageTarget(this.MyTexture.Target + 1); } } else { this.AnimationCount++; } } for (var i in this.MyPrimitives) { this.MyPrimitives[i].cycleLogic(); } } ;this.setImageTarget = function(target){ this.MyTexture.ImageFrames[this.MyTexture.Target].material = this.myCube().material; this.MyTexture.Target = target; this.myCube().material = this.MyTexture.ImageFrames[this.MyTexture.Target].getMaterial(this); };this.draw =  function() {};this.update =  function() {if (this.isActive && this.checkOmnipresence()) {this.prevMY = this.MY;this.updateCube();for(var i in this.MyLogic.OnUpdate) { this.MyLogic.OnUpdate[i].invoke(); } this.MyLogic.ActionBlock.update();for(var i in this.MyLogic.MyInputs) { this.MyLogic.MyInputs[i].update(); } for(var i in this.MyPrimitives) { this.MyPrimitives[i].update(); } if (this.MyTexture.CycleLength > 0) { this.cycleLogic(); }}};this.checkOmnipresence = function() { if (this.Omnipresent !== true) { return true; } else { this.Omnipresent = false; game.active().active().Threntities[this.MyIndex] = {}; return false; } };this.makeOmnipresent = function(index) { return false; /* not omnipresent */ };this.myCube =  function() {return this.cube;};this.cube = {};this.updateCubeMaterial = function() { };this.updateCube =  function() {this.myCube().position.x = this.X; this.myCube().position.y = this.Y; this.myCube().position.z = this.Z;};this.doesBorder =  function(threntity) {var wouldNot = !this.wouldCollide(threntity); var would = (threntity.wouldCollide(this.transpose(1,0,0)) || threntity.wouldCollide(this.transpose(-1,0,0)) || threntity.wouldCollide(this.transpose(0,0,1)) || threntity.wouldCollide(this.transpose(0,0,-1)) || threntity.wouldCollide(this.transpose(0,1,0)) || threntity.wouldCollide(this.transpose(0,-1,0))); return wouldNot && would;};this.collideZX =  function(threntity) {return this.collideZ(threntity) && this.collideX(threntity);};this.collideX =  function(threntity) {return (this.X + (this.W/2) > threntity.X - (threntity.W/2) && this.X - (this.W/2) < threntity.X + (threntity.W/2));};this.collideY =  function(threntity) {return (this.Y - (this.H / 2) < threntity.Y + (threntity.H / 2) && this.Y + (this.H / 2) > threntity.Y - (threntity.H / 2));};this.collideZ =  function(threntity) {return (this.Z + (this.D / 2) > threntity.Z - (threntity.D / 2) && this.Z - (this.D / 2) < threntity.Z + (threntity.D / 2));};this.wouldCollide =  function(threntity) {return this.collideX(threntity) && this.collideY(threntity) && this.collideZ(threntity);};this.move = function(xAmt, yAmt, zAmt) { this.X += xAmt; this.Y += yAmt; this.Z += zAmt; };this.isCarrying = function(other) { return this.deviationOfOne(this.T(), other.B()) && this.R() > other.X && this.X < other.R() && this.F() > other.Z && this.Z < other.F(); };this.isAtop = function(other) { return this.deviationOfOne(this.B(), other.T()) && this.R() > other.X && this.X < other.R() && this.F() > other.Z && this.Z < other.F(); };this.deviationOfOne = function(fVal, sVal) { if ((fVal - sVal <= 1 && fVal - sVal >= -1) || (sVal - fVal <= 1 && sVal - fVal >= -1)) return true; else { return false; } };this.getThoseAtop =  function() { let those = game.scene().allThrentities(); let found = []; for(var i in those) { if (this.isCarrying(those[i])==true) { found.push(those[i]); } } return found; };this.moveWithCargo = function(xAmt, yAmt, zAmt) { let found = this.getThoseAtop(); for(var i in found) { found[i].move(xAmt, yAmt, zAmt); } this.move(xAmt, yAmt, zAmt); };this.destroyMe = function() { game.scene().Threntities[this.MyIndex] = {}; };this.jump =  function(thrust) {if (this.notFalling()) { this.MY = thrust; }};this.notFalling =  function() {return this.MY == 0 && this.prevMY == 0;};this.L =  function() {return this.X - (this.W / parseFloat(2));};this.R =  function() {return this.X + (this.W / parseFloat(2));};this.T =  function() {return this.Y + (this.H / parseFloat(2));};this.B = function() { return this.Y - (this.H / parseFloat(2)); };this.A = function() { return this.Z - (this.D / parseFloat(2)); };this.F =  function() {return this.Z + (this.D / parseFloat(2));};this.isActive = true;this.IsAOPObject = function() { return true; };this.TypeName = Threntity;},ImageBox: function ImageBox(){this.Target = null;this.CycleLength = null;this.ImageFrames = [];this.Name = null;this.LocalData = null;this.Id = null;this.active =  function() {return this.ImageFrames[this.Target];};this.TypeName = ImageBox;},LogicBox: function LogicBox(){this.OnUpdate = [];this.MyInputs = [];this.ActionBlock = {setup:function() { },update:function() { }};this.Name = null;this.LocalData = null;this.Id = null;this.setup = function(index) { for(var i in this.OnUpdate) { this.OnUpdate[i].setup(index); } this.ActionBlock.setup(index);for(var i in this.MyInputs) { this.MyInputs[i].setup(index); }  };this.update =  function() {for(var i in this.MyInputs) { this.MyInputs[i].update(); } this.ActionBlock.update();for(var i in this.OnUpdate) { this.OnUpdate[i].invoke(); } };this.TypeName = LogicBox;},Dashboard: function Dashboard(){this.MyLabels = null;this.MyBars = null;this.Name = null;this.LocalData = null;this.Id = null;this.draw =  function() {for(var i in this.MyLabels) { this.MyLabels[i].render(); } for(var i in this.MyBars) { this.MyBars[i].render(); } };this.initialize = function() { for(var i in this.MyLabels) { this.MyLabels[i].ParentDash = this; }for(var i in this.MyBars) { this.MyBars[i].ParentDash = this; }};this.TypeName = Dashboard;},DashLabel: function DashLabel(){this.Caption = null;this.FontSize = null;this.X = null;this.Y = null;this.MyColor = null;this.DataModelName = null;this.SubmitTarget = null;this.ModelName = null;this.ClassName = null;this.Name = null;this.LocalData = null;this.Id = null;this.getCaption =  function() { return this.processText(this.Caption);} ;this.setCaption =  function(newCaption) {this.Caption = newCaption;};this.render =  function() {drawString(this.X, this.Y, this.getCaption(), this.MyColor, this.FontSize);};this.executeMethod =  function(name) {let dataModel = this.getDataModel();if (!dataModel || dataModel == null) { return; }let entry = dataModel.getEntry(name);entry.executeMethod(this);};this.processText =  function(text) { let dataModel = this.getDataModel();if (!dataModel || dataModel == null) { return text; }return dataModel.processText(text);} ;this.submit =  function() {this.executeMethod(this.SubmitTarget);};this.getDataModel =  function() {if (Object.keys(this.MyDataModel).length === 0 && this.MyDataModel.constructor === Object) { /* do nothing */ } else { return this.MyDataModel; }if (this.DataModelName != null && this.DataModelName.length > 0) {this.MyDataModel = game.DataLibrary.getModelByName(this.DataModelName);return this.MyDataModel;}else { return null; }};this.MyDataModel = {};this.ParentDash = {};this.IsAOPObject = function() { return true; };this.TypeName = DashLabel;},DashBar: function DashBar(){this.H = null;this.MaxWidth = null;this.MaxValue = null;this.Value = null;this.X = null;this.Y = null;this.MyColor = null;this.DataModelName = null;this.SubmitTarget = null;this.ModelName = null;this.ClassName = null;this.Name = null;this.LocalData = null;this.Id = null;this.calculateWidth =  function() {return this.MaxWidth * (this.Value / this.MaxValue);};this.render =  function() {drawRectangle(this.X, this.Y, this.calculateWidth(), this.H, this.MyColor);};this.executeMethod =  function(name) {let dataModel = this.getDataModel();if (!dataModel || dataModel == null) { return; }let entry = dataModel.getEntry(name);entry.executeMethod(this);};this.processText =  function(text) { let dataModel = this.getDataModel();if (!dataModel || dataModel == null) { return text; }return dataModel.processText(text);} ;this.submit =  function() {this.executeMethod(this.SubmitTarget);};this.getDataModel =  function() {if (Object.keys(this.MyDataModel).length === 0 && this.MyDataModel.constructor === Object) { /* do nothing */ } else { return this.MyDataModel; }if (this.DataModelName != null && this.DataModelName.length > 0) {this.MyDataModel = game.DataLibrary.getModelByName(this.DataModelName);return this.MyDataModel;}else { return null; }};this.MyDataModel = {};this.ParentDash = {};this.IsAOPObject = function() { return true; };this.TypeName = DashBar;},}
,"Name":"sampsonSeabat84","LocalData":"","TypeName":"Game","Id":134};
</script><img id="sampsonSeabat84tileExample0" src="build_84/sampsonSeabat84_cc_tileExample0.png" style="display: none;" /><img id="sampsonSeabat84someEntXXX40" src="build_84/sampsonSeabat84_cc_someEntXXX40.png" style="display: none;" /><img id="sampsonSeabat84someXEntX0" src="build_84/sampsonSeabat84_cc_someXEntX0.png" style="display: none;" /><img id="sampsonSeabat84someXEntX1" src="build_84/sampsonSeabat84_cc_someXEntX1.png" style="display: none;" /><img id="sampsonSeabat84someXEntX2" src="build_84/sampsonSeabat84_cc_someXEntX2.png" style="display: none;" /><img id="sampsonSeabat84someXEntX3" src="build_84/sampsonSeabat84_cc_someXEntX3.png" style="display: none;" /><img id="sampsonSeabat84JumpMan0" src="build_84/sampsonSeabat84_cc_JumpMan0.png" style="display: none;" /><img id="sampsonSeabat84JumpMan1" src="build_84/sampsonSeabat84_cc_JumpMan1.png" style="display: none;" /><img id="sampsonSeabat84someName0" src="build_84/sampsonSeabat84_cc_someName0.png" style="display: none;" /><img id="sampsonSeabat84otherObjectName0" src="build_84/sampsonSeabat84_cc_otherObjectName0.png" style="display: none;" /><img id="sampsonSeabat84otherObjectName1" src="build_84/sampsonSeabat84_cc_otherObjectName1.png" style="display: none;" /><img id="sampsonSeabat84someEntX0" src="build_84/sampsonSeabat84_cc_someEntX0.png" style="display: none;" /><img id="sampsonSeabat84someEntXX20" src="build_84/sampsonSeabat84_cc_someEntXX20.png" style="display: none;" /><img id="sampsonSeabat84someNonGSTest0" src="build_84/sampsonSeabat84_cc_someNonGSTest0.png" style="display: none;" /><img id="sampsonSeabat84testStairs0" src="build_84/sampsonSeabat84_cc_testStairs0.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat84Other0" src="build_84/sampsonSeabat84_cc_Other0.png" style="display: none;" /><img id="sampsonSeabat84Other1" src="build_84/sampsonSeabat84_cc_Other1.png" style="display: none;" /><img id="some_thing" src="build_84/some_thing.png" style="display: none;" /><img id="sampsonSeabat84Other20" src="build_84/sampsonSeabat84_cc_Other20.png" style="display: none;" /><img id="sampsonSeabat84Other21" src="build_84/sampsonSeabat84_cc_Other21.png" style="display: none;" /><img id="sampsonSeabat84someXEntX0" src="build_84/sampsonSeabat84_cc_someXEntX0.png" style="display: none;" /><img id="sampsonSeabat84someXEntX1" src="build_84/sampsonSeabat84_cc_someXEntX1.png" style="display: none;" /><img id="sampsonSeabat84someXEntX2" src="build_84/sampsonSeabat84_cc_someXEntX2.png" style="display: none;" /><img id="sampsonSeabat84someXEntX3" src="build_84/sampsonSeabat84_cc_someXEntX3.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat840" src="build_84/sampsonSeabat84_cc_0.png" style="display: none;" /><img id="sampsonSeabat841" src="build_84/sampsonSeabat84_cc_1.png" style="display: none;" /><img id="sampsonSeabat84someXEntX0" src="build_84/sampsonSeabat84_cc_someXEntX0.png" style="display: none;" /><img id="sampsonSeabat84someXEntX1" src="build_84/sampsonSeabat84_cc_someXEntX1.png" style="display: none;" /><img id="sampsonSeabat84someXEntX2" src="build_84/sampsonSeabat84_cc_someXEntX2.png" style="display: none;" /><img id="sampsonSeabat84someXEntX3" src="build_84/sampsonSeabat84_cc_someXEntX3.png" style="display: none;" /><img id="sampsonSeabat84someXEntX0" src="build_84/sampsonSeabat84_cc_someXEntX0.png" style="display: none;" /><img id="sampsonSeabat84someXEntX1" src="build_84/sampsonSeabat84_cc_someXEntX1.png" style="display: none;" /><img id="sampsonSeabat84someXEntX2" src="build_84/sampsonSeabat84_cc_someXEntX2.png" style="display: none;" /><img id="sampsonSeabat84someXEntX3" src="build_84/sampsonSeabat84_cc_someXEntX3.png" style="display: none;" /><script>function getCanvas()
 {
var canvas = document.getElementById('gameCanvas');
return canvas.getContext('2d');
}
function toggleFullScreen() {
var canv = document.getElementById('gameCanvas');
if (canv.webkitRequestFullscreen) {
canv.webkitRequestFullscreen();
}
else {
canv.mozRequestFullScreen();
}
reallignCanvases();
}
var reallignCanvases = function() {
var rect = document.getElementById('canvasDiv').getBoundingClientRect();
$('#threeCanvas').css({'left':rect.left-10,'top':rect.top-10,'width':rect.width+10,'height':rect.height+10});
$('#gameCanvas').css({'left':rect.left-10,'top':rect.top-10,'width':rect.width+10,'height':rect.height+10,'position':'absolute'});
}
function cAlert(msg) {
game.fadingMessage(msg, 90);
}
function cAlert(msg,dur) {
game.fadingMessage(msg,dur);
}
function pAlert(msg) {
}
function drawStringWithFont(x, y, msg, colorString, fontData)
 {
getCanvas().font=fontData;
 getCanvas().fillStyle = colorString;
 getCanvas().fillText(msg, x, y);
}
function drawString(x, y, msg, colorString)
 {
getCanvas().font='16px Georgia';
 getCanvas().fillStyle = colorString;
 getCanvas().fillText(msg, x, y);
}
function drawString(x, y, msg, colorString, fontSize) {
getCanvas().font = fontSize + 'px Georgia';
getCanvas().fillStyle = colorString;
getCanvas().fillText(msg, x, y);
}
function drawRectangle(x, y, w, h, color)
 {
getCanvas().fillStyle = color;
getCanvas().fillRect(x,y,w,h);
}
function drawImage(x, y, idOf) {
var imgObj = document.getElementById(idOf);
if (imgObj) {
getCanvas().drawImage(imgObj, x, y);
}
}
function drawImage(x, y, w, h, idOf) {
var imgObj = document.getElementById(idOf);
if (imgObj) {
getCanvas().drawImage(imgObj, x, y, w, h);
} else { alert('imgObj not ready or not found.'); }
}
var context = new (window.AudioContext || window.webkitAudioContext)();
function playNote(note,dur,inst) {
if (note > 0) {
var osc = context.createOscillator(); // instantiate an oscillator
osc.type = inst; // 'sine' is the default - also square, sawtooth, triangle
osc.frequency.value = note; // Hz
osc.connect(context.destination); // connect it to the destination
osc.start(); // start the oscillator
osc.stop(context.currentTime + dur);
}
}
function rgb(r, g, b) {
return 'rgb(' + r.toString() + ',' + g.toString() + ',' + b.toString() + ')';}
var scene = new THREE.Scene();
var threejsClearColor = 0x000000;
var camera = new THREE.PerspectiveCamera( 75, (4/3), 0.25, 18000 );
var renderer = new THREE.WebGLRenderer({ canvas: threeCanvas, alpha: false, autoclear: true });
renderer.setClearColor(threejsClearColor);
function updateClearColor(newColor) { renderer.setClearColor(newColor); }
function addAmbientLightToCurrentScene(color, intensity) { scene.add(new THREE.AmbientLight(color, intensity)); }
renderer.setSize(window.innerWidth, window.innerHeight);
renderer.shadowMap.enabled = true;
renderer.shadowMap.type = THREE.PCFSoftShadowMap;
camera.position.y = 120;
camera.position.z = 300;
setupContent(scene);
var renderThree = function () {
requestAnimationFrame( renderThree );
renderer.render(scene, camera);
};
renderThree();
function setupContent(scene) {
var geometries = [];
for (var j in geometries) {
for ( var i = 0; i < geometries[j].faces.length; i += 2 ) {
var hex = [0xff0000,0x00ff00,0x0000ff,0xff00ff,0x00ffff,0xffff00,0xff7f00,0x7f00ff,0x7fff00,0x007fff][i];
geometries[j].faces[ i ].color.setHex( hex );
geometries[j].faces[ i + 1 ].color.setHex( hex );
}
var material = new THREE.MeshLambertMaterial({
vertexColors: THREE.FaceColors,
overdraw: 0.5 });var cube = new THREE.Mesh( geometries[j], material );
if (j > 0) { cube.position.z -= (200 * j); }
scene.add(cube);
}
}
function setupPointLight(pointLight) {
let newLight = new THREE.PointLight(pointLight.LightColor, pointLight.Intensity / parseFloat(100), pointLight.Distance, pointLight.Decay / parseFloat(100));
newLight.castShadow = true;
newLight.position.set(pointLight.X, pointLight.Y, pointLight.Z);
scene.add(newLight);
}
function setupThrentity(threntity) {
var geometry = new THREE.BoxGeometry(threntity.W, threntity.H, threntity.D);
if (threntity.MyTexture.ImageFrames.length > 0 && threntity.MyTexture.active().hasImagePath()) {
for(var i = 0; i < 1; i++) {
 if (threntity.MyTexture.ImageFrames[i].hasImagePath()){
var texture = new THREE.TextureLoader().load( threntity.MyTexture.ImageFrames[i].imageFilePath );
if (threntity.TileX > 0 && threntity.TileY > 0) { texture.wrapS = THREE.RepeatWrapping;
texture.wrapT = THREE.RepeatWrapping;
texture.repeat.set( threntity.TileX, threntity.TileY );
}
else if (threntity.TileX > 0) { texture.wrapS = THREE.RepeatWrapping;
texture.repeat.set( threntity.TileX, 1 );
}
else if (threntity.TileY > 0) { texture.wrapT = THREE.RepeatWrapping;
texture.repeat.set(1, threntity.TileY );
}
}
}
}
for ( var i = 0; i < geometry.faces.length; i += 2 ) {
var hex = [0xff0000,0x00ff00,0x0000ff,0xff00ff,0x00ffff,0xffff00,0xff7f00,0x7f00ff,0x7fff00,0x007fff][i];
geometry.faces[ i ].color.setHex( hex );
geometry.faces[ i + 1 ].color.setHex( hex );
}
var material;
if (threntity.MyTexture.ImageFrames.length == 0 || !threntity.MyTexture.active().hasImagePath()) {
material = new THREE.MeshLambertMaterial({
vertexColors: THREE.FaceColors,
overdraw: 0.5 });
}
 else {
material = new THREE.MeshLambertMaterial({
map: texture,overdraw: 0.5 });
}
var lCube = new THREE.Mesh( geometry, material );
lCube.position.x = threntity.X;
lCube.position.y = threntity.Y;
lCube.position.z = threntity.Z;
threntity.cube = lCube;
scene.add(threntity.myCube());
}
function setupPrimitiveAs(prim) {
var geom = new THREE.Geometry();
geom.vertices.push(new THREE.Vector3(prim.fX, prim.fY, prim.fZ));
geom.vertices.push(new THREE.Vector3(prim.sX, prim.sY, prim.sZ));
geom.vertices.push(new THREE.Vector3(prim.tX, prim.tY, prim.tZ));
geom.faces.push( new THREE.Face3( 0, 1, 2 ) );
if (prim.IsQuad === true) {
geom.faceVertexUvs[0][0] = [new THREE.Vector2(1, 1),new THREE.Vector2(1, 0),new THREE.Vector2(0, 0)]; 
 }
else {
geom.faceVertexUvs[0][0] = [new THREE.Vector2(1, 1),new THREE.Vector2(0, 1),new THREE.Vector2(0, 0)]; 
 }
if (prim.PrimitiveImages !== null && prim.PrimitiveImages.ImageFrames !== null && prim.PrimitiveImages.ImageFrames.length > 0 && prim.PrimitiveImages.active().hasImagePath()) {
var texture = new THREE.TextureLoader().load( prim.PrimitiveImages.active().imageFilePath );
material = new THREE.MeshLambertMaterial({
map: texture,side: THREE.DoubleSide,overdraw: 0.5 });
var mesh= new THREE.Mesh(geom, material);
scene.add(mesh);
return mesh;
}
else {
setupPrimitive(prim.fX, prim.fY, prim.fZ, prim.sX, prim.sY, prim.sZ, prim.tX, prim.tY, prim.tZ, prim.MyColor);
}
}
function setupPrimitive(fx, fy, fz, sx, sy, sz, tx, ty, tz, pColor) {
if (pColor === null || pColor.length === 0) { pColor = '#007'; }
var geom = new THREE.Geometry();
geom.vertices.push(new THREE.Vector3(fx, fy, fz));
geom.vertices.push(new THREE.Vector3(sx, sy, sz));
geom.vertices.push(new THREE.Vector3(tx, ty, tz));
geom.faces.push( new THREE.Face3( 0, 1, 2 ) );
geom.computeFaceNormals();
var normalMaterial = new THREE.MeshLambertMaterial({color: pColor, side: THREE.DoubleSide});
var mesh= new THREE.Mesh( geom, normalMaterial);
scene.add(mesh);
return mesh;
}
function getVectorDifference(v1, v2) {return {X:v1.X-v2.X,Y:v1.Y-v2.Y,Z:v1.Z-v2.Z};}
function combineVectors(v1, v2) {return {X:v1.X+v2.X,Y:v1.Y+v2.Y,Z:v1.Z+v2.Z};}
function getCameraVector() {
var vector = new THREE.Vector3(0,0,-1);
vector.applyQuaternion(camera.quaternion);
return vector;
}
function getThrentityVector(thrent) {
var vector = new THREE.Vector3(0,0,-1);
vector.applyQuaternion(thrent.quaternion);
return vector;
}
function moveCameraForward(amt) {
var targetVector = getCameraVector();
var xAmt = targetVector.x * (amt);
var yAmt = targetVector.y * (amt);
var zAmt = targetVector.z * (amt);
camera.position.x += xAmt;
camera.position.y += yAmt;
camera.position.z += zAmt;
}
function moveCameraForwardUnless(amt) {
var targetVector = getCameraVector();
var xAmt = targetVector.x * (amt);
var yAmt = targetVector.y * (amt);
var zAmt = targetVector.z * (amt);
var before = new cwg.Threntity();
before.X = camera.position.x; before.Y = camera.position.y; before.Z = camera.position.z;
 var after = before.transpose(xAmt, yAmt, zAmt);
if (game.scene().checkMovePoint3d(before, after)==true) {camera.position.x += xAmt;
camera.position.y += yAmt;
camera.position.z += zAmt;
} else {  } }
function moveThrentityForward(thrent, amt) {
var targetVector = getThrentityVector(thrent.myCube());
var xAmt = targetVector.x * (amt);
var yAmt = targetVector.y * (amt);
var zAmt = targetVector.z * (amt);
thrent.X += xAmt;
thrent.Y += yAmt;
thrent.Z += zAmt;
}
function runMainSetup() {
 cwg = game.Classes;
mainSetup();
}
function mainSetup() {
reallignCanvases();
game.setup();
}
</script><script>startGame();</script></body></html>